{
  "address": "0x8491701646d2877E85363346AFa7eB70F1b09792",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakeToken_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmountLockClaim",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "AmountLockClaimSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newContribution",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldContribution",
          "type": "uint256"
        }
      ],
      "name": "ContributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        }
      ],
      "name": "ERC11551RequirementListDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmountId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155RequirementListSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        }
      ],
      "name": "ERC721RequirementListDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "balanceOf",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountBalanceOf",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmountBalanceOf",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmountId",
          "type": "uint256"
        }
      ],
      "name": "ERC721RequirementListSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxStake",
          "type": "uint256"
        }
      ],
      "name": "MaxStakeOverallSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimeWithdraw",
          "type": "uint256"
        }
      ],
      "name": "TimeLockWithdrawSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockPeriodInSecs",
          "type": "uint256"
        }
      ],
      "name": "TimelockClaimSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimeDeposit",
          "type": "uint256"
        }
      ],
      "name": "TimelockDepositSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amountLockClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimLockEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountLockLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkAndGetERC1155Stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkAndGetERC721Stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "computeContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "computeContributionInBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "contributionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contributionRules",
      "outputs": [
        {
          "internalType": "contract IContributionRules",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        }
      ],
      "name": "deleteERC1155RequirementList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        }
      ],
      "name": "deleteERC721RequirementList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "reqContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getERC1155BalanceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getERC1155MaxStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        }
      ],
      "name": "getERC1155RequirementList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "minAmountId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct RequirementsRules.ERC1155RequirementRule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "reqContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getERC721BalanceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getERC721MaxStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        }
      ],
      "name": "getERC721RequirementList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "balanceOf",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minAmountBalanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountBalanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct RequirementsRules.ERC721RequirementRule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingTimelockClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingTimelockDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingTimelockWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "reqContract",
          "type": "address"
        }
      ],
      "name": "isERC1155MemberRequirementList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "reqContract",
          "type": "address"
        }
      ],
      "name": "isERC721MemberRequirementList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockPeriodInSecs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockPeriodInSecs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maxStakeAllowedCalculator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakeOverall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restartRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCalculator",
      "outputs": [
        {
          "internalType": "contract IRewardCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newAmountLockClaim",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isEnabled",
          "type": "bool"
        }
      ],
      "name": "setAmountLockClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setContributionRules",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC1155",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minAmountId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountId",
          "type": "uint256"
        }
      ],
      "name": "setERC1155RequirementList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractERC721",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "balanceOf",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minAmountBalanceOf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountBalanceOf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountId",
          "type": "uint256"
        }
      ],
      "name": "setERC721RequirementList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxStake",
          "type": "uint256"
        }
      ],
      "name": "setMaxStakeOverall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "restartRewards_",
          "type": "bool"
        }
      ],
      "name": "setRewardCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTimeWithdraw",
          "type": "uint256"
        }
      ],
      "name": "setTimeLockWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockPeriodInSecs",
          "type": "uint256"
        }
      ],
      "name": "setTimelockClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTimeDeposit",
          "type": "uint256"
        }
      ],
      "name": "setTimelockDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLockClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockPeriodInSecs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLockLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23634d9a3e0518420c4876f8f3c939f2c69d33f30735c51cb09624c7f9cf734c",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x8491701646d2877E85363346AFa7eB70F1b09792",
    "transactionIndex": 3,
    "gasUsed": "4933813",
    "logsBloom": "0x
    "blockHash": "0x7234ce2503ed32c5c649ffdb007e72f55bd1d2d90ccf5b3173cfed124c0457fa",
    "transactionHash": "0x23634d9a3e0518420c4876f8f3c939f2c69d33f30735c51cb09624c7f9cf734c",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27429122,
        "transactionHash": "0x23634d9a3e0518420c4876f8f3c939f2c69d33f30735c51cb09624c7f9cf734c",
        "address": "0x8491701646d2877E85363346AFa7eB70F1b09792",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x7234ce2503ed32c5c649ffdb007e72f55bd1d2d90ccf5b3173cfed124c0457fa"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 27429122,
        "transactionHash": "0x23634d9a3e0518420c4876f8f3c939f2c69d33f30735c51cb09624c7f9cf734c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000021416cba8c22be30000000000000000000000000000000000000000000000000cc1f85549925aa600000000000000000000000000000000000000000000057a498d6c9a8d64a8350000000000000000000000000000000000000000000000000aade189a0d02ec300000000000000000000000000000000000000000000057a4ba183663626d418",
        "logIndex": 14,
        "blockHash": "0x7234ce2503ed32c5c649ffdb007e72f55bd1d2d90ccf5b3173cfed124c0457fa"
      }
    ],
    "blockNumber": 27429122,
    "cumulativeGasUsed": "9452710",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x592daadC9eA7F56A81De1FD27A723Bd407709c46",
    "0x592daadC9eA7F56A81De1FD27A723Bd407709c46",
    "0x69015912aa33720b842dcd6ac059ed623f28d9f7"
  ],
  "numDeployments": 1,
  "solcInputHash": "686b87f111908fb649e9ad0432e53380",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmountLockClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"AmountLockClaimSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldContribution\",\"type\":\"uint256\"}],\"name\":\"ContributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"}],\"name\":\"ERC11551RequirementListDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"}],\"name\":\"ERC1155RequirementListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"ERC721RequirementListDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountBalanceOf\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountBalanceOf\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"}],\"name\":\"ERC721RequirementListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxStake\",\"type\":\"uint256\"}],\"name\":\"MaxStakeOverallSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeWithdraw\",\"type\":\"uint256\"}],\"name\":\"TimeLockWithdrawSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"name\":\"TimelockClaimSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeDeposit\",\"type\":\"uint256\"}],\"name\":\"TimelockDepositSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amountLockClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimLockEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkAndGetERC1155Stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkAndGetERC721Stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"computeContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"computeContributionInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"contributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionRules\",\"outputs\":[{\"internalType\":\"contract IContributionRules\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"}],\"name\":\"deleteERC1155RequirementList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"deleteERC721RequirementList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"reqContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC1155BalanceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC1155MaxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"}],\"name\":\"getERC1155RequirementList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct RequirementsRules.ERC1155RequirementRule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"reqContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC721BalanceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC721MaxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"getERC721RequirementList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmountBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct RequirementsRules.ERC721RequirementRule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTimelockClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTimelockDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTimelockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"reqContract\",\"type\":\"address\"}],\"name\":\"isERC1155MemberRequirementList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"reqContract\",\"type\":\"address\"}],\"name\":\"isERC721MemberRequirementList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxStakeAllowedCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeOverall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restartRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCalculator\",\"outputs\":[{\"internalType\":\"contract IRewardCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmountLockClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setAmountLockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setContributionRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"}],\"name\":\"setERC1155RequirementList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmountBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"}],\"name\":\"setERC721RequirementList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxStake\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeOverall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"restartRewards_\",\"type\":\"bool\"}],\"name\":\"setRewardCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimeWithdraw\",\"type\":\"uint256\"}],\"name\":\"setTimeLockWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInSecs\",\"type\":\"uint256\"}],\"name\":\"setTimelockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimeDeposit\",\"type\":\"uint256\"}],\"name\":\"setTimelockDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract has two plugins that affect the behaviour: contributionCalculator and rewardCalculatorcontributionCalculator instead of using the stake directly the result of computeContribution is usedthis way some users can get an extra share of the rewardsrewardCalculator is used to manage the rate at which the rewards are distributed.This way we can build different types of pools by mixing in the plugins we want with this contract.default behaviour (address(0)) for contributionCalculator is to use the stacked amount as contribution.default behaviour (address(0)) for rewardCalculator is that no rewards are given\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"account\":\"the address of the account\"},\"returns\":{\"_0\":\"balance of staked tokens\"}},\"computeContribution(address)\":{\"details\":\"if the user change his holdings (or any other parameter that affect the contribution calculation),he can the reward distribution to his favor. This function must be called by an external agent ASAP toupdate the contribution for the user. We understand the risk but the rewards are distributed slowly sothe user cannot affect the reward distribution heavily.\",\"params\":{\"account\":\"the address of the account\"}},\"computeContributionInBatch(address[])\":{\"details\":\"see: computeContribution\",\"params\":{\"accounts\":\"the addresses of the accounts to update\"}},\"contributionOf(address)\":{\"details\":\"this is the same than the balanceOf only if the contribution calculatoruses the staked amount as the contribution of the user which is the default behaviour\",\"params\":{\"account\":\"the address of the account\"},\"returns\":{\"_0\":\"contribution of the users\"}},\"earned(address)\":{\"params\":{\"account\":\"the address of the account\"},\"returns\":{\"_0\":\"the available earnings for the user\"}},\"getReward()\":{\"details\":\"the user can withdraw his stake independently from the rewards\"},\"getRewardsAvailable()\":{\"details\":\"this function can be called by a reward calculator to throw if a campaign doesn't haveenough rewards to start\",\"returns\":{\"_0\":\"the total amount of deposited rewards\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverFunds(address)\":{\"details\":\"this function must be called in an emergency situation only.Calling it is risky specially when rewardToken == stakeToken\",\"params\":{\"receiver\":\"address of the beneficiary of the recovered funds\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"restartRewards()\":{\"details\":\"calling this function makes no difference. It is useful for testing and when the reward calculatoris changed.\"},\"rewardPerToken()\":{\"details\":\"This value multiplied by the user contribution is the share of accumulated rewards for the user. Takinginto account the value of totalContributions.\",\"returns\":{\"_0\":\"the accumulated total rewards\"}},\"setRewardCalculator(address,bool)\":{\"params\":{\"contractAddress\":\"address of a plugin that calculates absolute rewards at any point in time\",\"restartRewards_\":\"if true the rewards from the previous calculator are accumulated before changing it\"}},\"setRewardToken(address)\":{\"params\":{\"contractAddress\":\"address token used to pay rewards\"}},\"setStakeToken(address)\":{\"params\":{\"contractAddress\":\"address token used to stake funds\"}},\"setTimelockClaim(uint256)\":{\"params\":{\"_lockPeriodInSecs\":\"amount of time the user must wait between reward withdrawal\"}},\"setTrustedForwarder(address)\":{\"params\":{\"trustedForwarder\":\"address of the contract that is enabled to send meta-tx on behalf of the user\"}},\"stake(uint256)\":{\"details\":\"the user must approve in the stake token before calling this function\",\"params\":{\"amount\":\"the amount of tokens to stake\"}},\"stakeToken()\":{\"returns\":{\"_0\":\"address of the stake token contract\"}},\"totalContributions()\":{\"details\":\"this is the same than the totalSupply only if the contribution calculatoruses the staked amount as the contribution of the user which is the default behaviour\",\"returns\":{\"_0\":\"total contributions of the users\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"the total supply of staked tokens\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"the user can withdraw his stake independently from the rewards\",\"params\":{\"amount\":\"the amount of tokens to withdraw\"}}},\"title\":\"A pool that distributes rewards between users that stake any erc20 token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"return the balance of staked tokens for a user\"},\"computeContribution(address)\":{\"notice\":\"update the contribution for a user\"},\"computeContributionInBatch(address[])\":{\"notice\":\"update the contribution for a sef of users\"},\"contributionOf(address)\":{\"notice\":\"return the contribution of some user\"},\"earned(address)\":{\"notice\":\"available earnings for some user\"},\"exit()\":{\"notice\":\"withdraw the stake and the rewards from the contract\"},\"getReward()\":{\"notice\":\"withdraw the rewards from the contract\"},\"getRewardsAvailable()\":{\"notice\":\"return the amount of rewards deposited in the contract that can be distributed by different campaigns\"},\"recoverFunds(address)\":{\"notice\":\"the admin recover is able to recover reward funds\"},\"restartRewards()\":{\"notice\":\"accumulates the current rewards into rewardPerTokenStored and restart the reward calculator\"},\"rewardPerToken()\":{\"notice\":\"accumulated rewards taking into account the totalContribution (see: rewardPerTokenStored)\"},\"setContributionRules(address)\":{\"notice\":\"set contract that contains all the contribution rules\"},\"setRewardCalculator(address,bool)\":{\"notice\":\"set the reward calculator\"},\"setRewardToken(address)\":{\"notice\":\"set the reward token\"},\"setStakeToken(address)\":{\"notice\":\"set the stake token\"},\"setTimelockClaim(uint256)\":{\"notice\":\"set the _lockPeriodInSecs for the anti-compound buffer\"},\"setTrustedForwarder(address)\":{\"notice\":\"set the trusted forwarder\"},\"stake(uint256)\":{\"notice\":\"stake some amount into the contract\"},\"stakeToken()\":{\"notice\":\"return the address of the stake token contract\"},\"totalContributions()\":{\"notice\":\"return the sum of the values returned by the contribution calculator\"},\"totalSupply()\":{\"notice\":\"return the total supply of staked tokens\"},\"withdraw(uint256)\":{\"notice\":\"withdraw the stake from the contract\"}},\"notice\":\"The contributions are updated passively, an external call to computeContribution from a backend is needed.After initialization the reward calculator must be set by the admin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/defi/ERC20RewardPool.sol\":\"ERC20RewardPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771HandlerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\nabstract contract ERC2771HandlerV2 {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771HandlerV2_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            require(msg.data.length >= 24, \\\"ERC2771HandlerV2: Invalid msg.data\\\");\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            require(msg.data.length >= 24, \\\"ERC2771HandlerV2: Invalid msg.data\\\");\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71e69d3600a76240aa727998b6c2da2f93d654d16498cb29cfa5fb9566b440c3\",\"license\":\"MIT\"},\"src/solc_0.8/defi/ERC20RewardPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts-0.8/security/Pausable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport {ERC2771HandlerV2} from \\\"../common/BaseWithStorage/ERC2771HandlerV2.sol\\\";\\nimport {StakeTokenWrapper} from \\\"./StakeTokenWrapper.sol\\\";\\nimport {IContributionRules} from \\\"./interfaces/IContributionRules.sol\\\";\\nimport {IRewardCalculator} from \\\"./interfaces/IRewardCalculator.sol\\\";\\nimport {LockRules} from \\\"./rules/LockRules.sol\\\";\\nimport {RequirementsRules} from \\\"./rules/RequirementsRules.sol\\\";\\n\\n/// @title A pool that distributes rewards between users that stake any erc20 token\\n/// @notice The contributions are updated passively, an external call to computeContribution from a backend is needed.\\n/// @notice After initialization the reward calculator must be set by the admin.\\n/// @dev The contract has two plugins that affect the behaviour: contributionCalculator and rewardCalculator\\n/// @dev contributionCalculator instead of using the stake directly the result of computeContribution is used\\n/// @dev this way some users can get an extra share of the rewards\\n/// @dev rewardCalculator is used to manage the rate at which the rewards are distributed.\\n/// @dev This way we can build different types of pools by mixing in the plugins we want with this contract.\\n/// @dev default behaviour (address(0)) for contributionCalculator is to use the stacked amount as contribution.\\n/// @dev default behaviour (address(0)) for rewardCalculator is that no rewards are given\\ncontract ERC20RewardPool is\\n    Ownable,\\n    StakeTokenWrapper,\\n    LockRules,\\n    RequirementsRules,\\n    ReentrancyGuard,\\n    ERC2771HandlerV2,\\n    Pausable\\n{\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    event Staked(address indexed account, uint256 stakeAmount);\\n    event Withdrawn(address indexed account, uint256 stakeAmount);\\n    event Exit(address indexed account);\\n    event RewardPaid(address indexed account, uint256 rewardAmount);\\n    event ContributionUpdated(address indexed account, uint256 newContribution, uint256 oldContribution);\\n\\n    uint256 internal constant DECIMALS_18 = 1 ether;\\n\\n    // This value multiplied by the user contribution is the share of accumulated rewards (from the start of time\\n    // until the last call to restartRewards) for the user taking into account the value of totalContributions.\\n    uint256 public rewardPerTokenStored;\\n\\n    IERC20 public rewardToken;\\n    IContributionRules public contributionRules;\\n    IRewardCalculator public rewardCalculator;\\n\\n    // This value multiplied by the user contribution is the share of reward from the the last time\\n    // the user changed his contribution and called restartRewards\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    // This value is the accumulated rewards won by the user when he called the contract.\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 internal _totalContributions;\\n    mapping(address => uint256) internal _contributions;\\n\\n    constructor(\\n        IERC20 stakeToken_,\\n        IERC20 rewardToken_,\\n        address trustedForwarder\\n    ) StakeTokenWrapper(stakeToken_) {\\n        require(address(rewardToken_).isContract(), \\\"ERC20RewardPool: is not a contract\\\");\\n        rewardToken = rewardToken_;\\n        __ERC2771HandlerV2_initialize(trustedForwarder);\\n    }\\n\\n    // Checks that the given address is a contract and\\n    // that the caller of the method is the owner of this contract - ERC20RewardPool.\\n    modifier isContractAndAdmin(address contractAddress) {\\n        require(contractAddress.isContract(), \\\"ERC20RewardPool: is not a contract\\\");\\n        require(owner() == _msgSender(), \\\"ERC20RewardPool: not admin\\\");\\n        _;\\n    }\\n\\n    modifier isValidAddress(address account) {\\n        require(account != address(0), \\\"ERC20RewardPool: zero address\\\");\\n\\n        _;\\n    }\\n\\n    /// @notice set the reward token\\n    /// @param contractAddress address token used to pay rewards\\n    function setRewardToken(address contractAddress)\\n        external\\n        isContractAndAdmin(contractAddress)\\n        isValidAddress(contractAddress)\\n    {\\n        IERC20 _newRewardToken = IERC20(contractAddress);\\n        require(\\n            rewardToken.balanceOf(address(this)) <= _newRewardToken.balanceOf(address(this)),\\n            \\\"ERC20RewardPool: insufficient balance\\\"\\n        );\\n        rewardToken = _newRewardToken;\\n    }\\n\\n    /// @notice set the stake token\\n    /// @param contractAddress address token used to stake funds\\n    function setStakeToken(address contractAddress)\\n        external\\n        isContractAndAdmin(contractAddress)\\n        isValidAddress(contractAddress)\\n    {\\n        IERC20 _newStakeToken = IERC20(contractAddress);\\n        require(\\n            _stakeToken.balanceOf(address(this)) <= _newStakeToken.balanceOf(address(this)),\\n            \\\"ERC20RewardPool: insufficient balance\\\"\\n        );\\n        _stakeToken = _newStakeToken;\\n    }\\n\\n    /// @notice set the trusted forwarder\\n    /// @param trustedForwarder address of the contract that is enabled to send meta-tx on behalf of the user\\n    function setTrustedForwarder(address trustedForwarder) external isContractAndAdmin(trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @notice set contract that contains all the contribution rules\\n    function setContributionRules(address contractAddress)\\n        external\\n        isContractAndAdmin(contractAddress)\\n        isValidAddress(contractAddress)\\n    {\\n        contributionRules = IContributionRules(contractAddress);\\n    }\\n\\n    /// @notice set the reward calculator\\n    /// @param contractAddress address of a plugin that calculates absolute rewards at any point in time\\n    /// @param restartRewards_ if true the rewards from the previous calculator are accumulated before changing it\\n    function setRewardCalculator(address contractAddress, bool restartRewards_)\\n        external\\n        isContractAndAdmin(contractAddress)\\n        isValidAddress(contractAddress)\\n    {\\n        // We process the rewards of the current reward calculator before the switch.\\n        if (restartRewards_) {\\n            _restartRewards();\\n        }\\n        rewardCalculator = IRewardCalculator(contractAddress);\\n    }\\n\\n    /// @notice the admin recover is able to recover reward funds\\n    /// @param receiver address of the beneficiary of the recovered funds\\n    /// @dev this function must be called in an emergency situation only.\\n    /// @dev Calling it is risky specially when rewardToken == stakeToken\\n    function recoverFunds(address receiver) external onlyOwner whenPaused() isValidAddress(receiver) {\\n        uint256 recoverAmount;\\n\\n        if (rewardToken == _stakeToken) {\\n            recoverAmount = rewardToken.balanceOf(address(this)) - _totalSupply;\\n        } else {\\n            recoverAmount = rewardToken.balanceOf(address(this));\\n        }\\n\\n        rewardToken.safeTransfer(receiver, recoverAmount);\\n    }\\n\\n    /// @notice return the total supply of staked tokens\\n    /// @return the total supply of staked tokens\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice return the balance of staked tokens for a user\\n    /// @param account the address of the account\\n    /// @return balance of staked tokens\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice return the address of the stake token contract\\n    /// @return address of the stake token contract\\n    function stakeToken() external view returns (IERC20) {\\n        return _stakeToken;\\n    }\\n\\n    /// @notice return the amount of rewards deposited in the contract that can be distributed by different campaigns\\n    /// @return the total amount of deposited rewards\\n    /// @dev this function can be called by a reward calculator to throw if a campaign doesn't have\\n    /// @dev enough rewards to start\\n    function getRewardsAvailable() external view returns (uint256) {\\n        if (address(rewardToken) != address(_stakeToken)) {\\n            return rewardToken.balanceOf(address(this));\\n        }\\n        return _stakeToken.balanceOf(address(this)) - _totalSupply;\\n    }\\n\\n    /// @notice return the sum of the values returned by the contribution calculator\\n    /// @return total contributions of the users\\n    /// @dev this is the same than the totalSupply only if the contribution calculator\\n    /// @dev uses the staked amount as the contribution of the user which is the default behaviour\\n    function totalContributions() external view returns (uint256) {\\n        return _totalContributions;\\n    }\\n\\n    /// @notice return the contribution of some user\\n    /// @param account the address of the account\\n    /// @return contribution of the users\\n    /// @dev this is the same than the balanceOf only if the contribution calculator\\n    /// @dev uses the staked amount as the contribution of the user which is the default behaviour\\n    function contributionOf(address account) external view returns (uint256) {\\n        return _contributions[account];\\n    }\\n\\n    /// @notice accumulated rewards taking into account the totalContribution (see: rewardPerTokenStored)\\n    /// @return the accumulated total rewards\\n    /// @dev This value multiplied by the user contribution is the share of accumulated rewards for the user. Taking\\n    /// @dev into account the value of totalContributions.\\n    function rewardPerToken() external view returns (uint256) {\\n        return rewardPerTokenStored + _rewardPerToken();\\n    }\\n\\n    /// @notice available earnings for some user\\n    /// @param account the address of the account\\n    /// @return the available earnings for the user\\n    function earned(address account) external view returns (uint256) {\\n        return rewards[account] + _earned(account, _rewardPerToken());\\n    }\\n\\n    /// @notice accumulates the current rewards into rewardPerTokenStored and restart the reward calculator\\n    /// @dev calling this function makes no difference. It is useful for testing and when the reward calculator\\n    /// @dev is changed.\\n    function restartRewards() external {\\n        _restartRewards();\\n    }\\n\\n    /// @notice update the contribution for a user\\n    /// @param account the address of the account\\n    /// @dev if the user change his holdings (or any other parameter that affect the contribution calculation),\\n    /// @dev he can the reward distribution to his favor. This function must be called by an external agent ASAP to\\n    /// @dev update the contribution for the user. We understand the risk but the rewards are distributed slowly so\\n    /// @dev the user cannot affect the reward distribution heavily.\\n    function computeContribution(address account) external isValidAddress(account) {\\n        // We decide to give the user the accumulated rewards even if he cheated a little bit.\\n        _processRewards(account);\\n        _updateContribution(account);\\n    }\\n\\n    /// @notice update the contribution for a sef of users\\n    /// @param accounts the addresses of the accounts to update\\n    /// @dev see: computeContribution\\n    function computeContributionInBatch(address[] calldata accounts) external {\\n        _restartRewards();\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            if (account == address(0)) {\\n                continue;\\n            }\\n            _processAccountRewards(account);\\n            _updateContribution(account);\\n        }\\n    }\\n\\n    /// @notice stake some amount into the contract\\n    /// @param amount the amount of tokens to stake\\n    /// @dev the user must approve in the stake token before calling this function\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        whenNotPaused()\\n        antiDepositCheck(_msgSender())\\n        checkRequirements(_msgSender(), amount, _balances[_msgSender()])\\n    {\\n        require(amount > 0, \\\"ERC20RewardPool: Cannot stake 0\\\");\\n\\n        // The first time a user stakes he cannot remove his rewards immediately.\\n        if (timeLockClaim.lastClaim[_msgSender()] == 0) {\\n            timeLockClaim.lastClaim[_msgSender()] = block.timestamp;\\n        }\\n\\n        lockDeposit.lastDeposit[_msgSender()] = block.timestamp;\\n\\n        uint256 earlierRewards = 0;\\n\\n        if (_totalContributions == 0 && rewardCalculator != IRewardCalculator(address(0))) {\\n            earlierRewards = rewardCalculator.getRewards();\\n        }\\n\\n        _processRewards(_msgSender());\\n        super._stake(amount);\\n        _updateContribution(_msgSender());\\n        require(_contributions[_msgSender()] > 0, \\\"ERC20RewardPool: not enough contributions\\\");\\n\\n        if (earlierRewards != 0) {\\n            rewards[_msgSender()] = rewards[_msgSender()] + earlierRewards;\\n        }\\n        emit Staked(_msgSender(), amount);\\n    }\\n\\n    /// @notice withdraw the stake from the contract\\n    /// @param amount the amount of tokens to withdraw\\n    /// @dev the user can withdraw his stake independently from the rewards\\n    function withdraw(uint256 amount) external nonReentrant whenNotPaused() {\\n        _processRewards(_msgSender());\\n        _withdrawStake(_msgSender(), amount);\\n        _updateContribution(_msgSender());\\n    }\\n\\n    /// @notice withdraw the stake and the rewards from the contract\\n    function exit() external nonReentrant whenNotPaused() {\\n        _processRewards(_msgSender());\\n        _withdrawStake(_msgSender(), _balances[_msgSender()]);\\n        _withdrawRewards(_msgSender());\\n        _updateContribution(_msgSender());\\n        emit Exit(_msgSender());\\n    }\\n\\n    /// @notice withdraw the rewards from the contract\\n    /// @dev the user can withdraw his stake independently from the rewards\\n    function getReward() external nonReentrant whenNotPaused() {\\n        _processRewards(_msgSender());\\n        _withdrawRewards(_msgSender());\\n        _updateContribution(_msgSender());\\n    }\\n\\n    function renounceOwnership() public view override onlyOwner {\\n        revert(\\\"ERC20RewardPool: can't renounceOwnership\\\");\\n    }\\n\\n    function _withdrawStake(address account, uint256 amount) internal antiWithdrawCheck(_msgSender()) {\\n        require(amount > 0, \\\"ERC20RewardPool: Cannot withdraw 0\\\");\\n        lockWithdraw.lastWithdraw[_msgSender()] = block.timestamp;\\n        super._withdraw(amount);\\n        emit Withdrawn(account, amount);\\n    }\\n\\n    function _withdrawRewards(address account) internal timeLockClaimCheck(account) {\\n        uint256 reward = rewards[account];\\n        uint256 mod = 0;\\n        if (reward > 0) {\\n            if (amountLockClaim.claimLockEnabled == true) {\\n                // constrain the reward amount to the integer allowed\\n                mod = reward % DECIMALS_18;\\n                reward = reward - mod;\\n                require(\\n                    amountLockClaim.amount <= reward,\\n                    \\\"ERC20RewardPool: Cannot withdraw - lockClaim.amount < reward\\\"\\n                );\\n            }\\n            rewards[account] = mod;\\n            rewardToken.safeTransfer(account, reward);\\n            emit RewardPaid(account, reward);\\n        }\\n    }\\n\\n    function _updateContribution(address account) internal {\\n        uint256 oldContribution = _contributions[account];\\n        _totalContributions = _totalContributions - oldContribution;\\n        uint256 contribution = _computeContribution(account);\\n        _totalContributions = _totalContributions + contribution;\\n        _contributions[account] = contribution;\\n        emit ContributionUpdated(account, contribution, oldContribution);\\n    }\\n\\n    function _computeContribution(address account) internal returns (uint256) {\\n        if (contributionRules == IContributionRules(address(0))) {\\n            return _balances[account];\\n        } else {\\n            return contributionRules.computeMultiplier(account, _balances[account]);\\n        }\\n    }\\n\\n    // Something changed (stake, withdraw, etc), we distribute current accumulated rewards and start from zero.\\n    // Called each time there is a change in contract state (stake, withdraw, etc).\\n    function _processRewards(address account) internal {\\n        _restartRewards();\\n        _processAccountRewards(account);\\n    }\\n\\n    // Update the earnings for this specific user with what he earned until now\\n    function _processAccountRewards(address account) internal {\\n        // usually _earned takes _rewardPerToken() but in this method is zero because _restartRewards must be\\n        // called before _processAccountRewards\\n        rewards[account] = rewards[account] + _earned(account, 0);\\n        // restart rewards for this specific user, now earned(account) = 0\\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n\\n    function _restartRewards() internal {\\n        if (rewardCalculator != IRewardCalculator(address(0))) {\\n            // Distribute the accumulated rewards\\n            rewardPerTokenStored = rewardPerTokenStored + _rewardPerToken();\\n            // restart rewards so now the rewardCalculator return zero rewards\\n            rewardCalculator.restartRewards();\\n        }\\n    }\\n\\n    function _earned(address account, uint256 rewardPerToken_) internal view returns (uint256) {\\n        // - userRewardPerTokenPaid[account] * _contributions[account]  / _totalContributions is the portion of\\n        //      rewards the last time the user changed his contribution and called _restartRewards\\n        //      (_totalContributions corresponds to previous value of that moment).\\n        // - rewardPerTokenStored * _contributions[account] is the share of the user from the\\n        //      accumulated rewards (from the start of time until the last call to _restartRewards) with the\\n        //      current value of _totalContributions\\n        // - _rewardPerToken() * _contributions[account]  / _totalContributions is the share of the user of the\\n        //      rewards from the last time anybody called _restartRewards until this moment\\n        //\\n        // The important thing to note is that at any moment in time _contributions[account] / _totalContributions is\\n        // the share of the user even if _totalContributions changes because of other users activity.\\n        return\\n            ((rewardPerToken_ + rewardPerTokenStored - userRewardPerTokenPaid[account]) * _contributions[account]) /\\n            1e24;\\n    }\\n\\n    // This function gives the proportion of the total contribution that corresponds to each user from\\n    // last restartRewards call.\\n    // _rewardsPerToken() * _contributions[account] is the amount of extra rewards gained from last restartRewards.\\n    function _rewardPerToken() internal view returns (uint256) {\\n        if (rewardCalculator == IRewardCalculator(address(0)) || _totalContributions == 0) {\\n            return 0;\\n        }\\n        return (rewardCalculator.getRewards() * 1e24) / _totalContributions;\\n    }\\n\\n    // @dev Triggers stopped state.\\n    // The contract must not be paused.\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    // @dev Returns to normal state.\\n    // The contract must be paused.\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771HandlerV2) returns (address sender) {\\n        return ERC2771HandlerV2._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771HandlerV2) returns (bytes calldata) {\\n        return ERC2771HandlerV2._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x68c6ae1fc59d7746dfa7e70abb4ae1ee1e75a48c16641736661c4de771596a56\",\"license\":\"MIT\"},\"src/solc_0.8/defi/StakeTokenWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\n\\nabstract contract StakeTokenWrapper is Context {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    IERC20 internal _stakeToken;\\n\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n\\n    constructor(IERC20 stakeToken) {\\n        require(address(stakeToken).isContract(), \\\"StakeTokenWrapper: is not a contract\\\");\\n        _stakeToken = stakeToken;\\n    }\\n\\n    function _stake(uint256 amount) internal virtual {\\n        require(amount > 0, \\\"StakeTokenWrapper: amount > 0\\\");\\n        _totalSupply = _totalSupply + amount;\\n        _balances[_msgSender()] = _balances[_msgSender()] + amount;\\n        _stakeToken.safeTransferFrom(_msgSender(), address(this), amount);\\n    }\\n\\n    function _withdraw(uint256 amount) internal virtual {\\n        require(amount > 0, \\\"StakeTokenWrapper: amount > 0\\\");\\n        _totalSupply = _totalSupply - amount;\\n        _balances[_msgSender()] = _balances[_msgSender()] - amount;\\n        _stakeToken.safeTransfer(_msgSender(), amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3e4c1d959b8a97054202e4e8bb22d3201a88e77774f13c786eaf81166912f341\",\"license\":\"MIT\"},\"src/solc_0.8/defi/interfaces/IContributionRules.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\ninterface IContributionRules {\\n    function computeMultiplier(address account, uint256 amountStaked) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc2514b3afffa88153188436b097b83f51ff478ac787405a2213fa49f72c970a9\",\"license\":\"MIT\"},\"src/solc_0.8/defi/interfaces/IRewardCalculator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @title Plugins for Reward Pools that calculate the rewards must implement this interface\\ninterface IRewardCalculator {\\n    /// @dev At any point in time this function must return the accumulated rewards from the last call to restartRewards\\n    function getRewards() external view returns (uint256);\\n\\n    /// @dev The main contract has distributed the rewards (getRewards()) until this point, this must start\\n    /// @dev from scratch => getRewards() == 0\\n    function restartRewards() external;\\n}\\n\",\"keccak256\":\"0x5c9df8d403f2f84f1a0eea40c9aacc7d54f929abede4cb4359ef3e79a1fa6ca0\",\"license\":\"MIT\"},\"src/solc_0.8/defi/rules/LockRules.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\n\\n// Note: this contract is meant to be inherited by ERC20RewardPool.\\n// we should override the renounceOwnership() method otherwise.\\ncontract LockRules is Context, Ownable {\\n    // limits\\n    uint256 public constant timeLockLimit = 180 days;\\n    uint256 public constant amountLockLimit = 1000 ether;\\n\\n    struct TimeLockClaim {\\n        uint256 lockPeriodInSecs;\\n        mapping(address => uint256) lastClaim;\\n    }\\n\\n    struct AmountLockClaim {\\n        uint256 amount;\\n        bool claimLockEnabled;\\n    }\\n\\n    struct TimeLockWithdraw {\\n        uint256 lockPeriodInSecs;\\n        mapping(address => uint256) lastWithdraw;\\n    }\\n\\n    struct TimeLockDeposit {\\n        uint256 lockPeriodInSecs;\\n        mapping(address => uint256) lastDeposit;\\n    }\\n\\n    event TimelockClaimSet(uint256 lockPeriodInSecs);\\n    event TimelockDepositSet(uint256 newTimeDeposit);\\n    event TimeLockWithdrawSet(uint256 newTimeWithdraw);\\n    event AmountLockClaimSet(uint256 newAmountLockClaim, bool isEnabled);\\n\\n    // This is used to implement a time buffer for reward retrieval, so the user cannot re-stake the rewards too fast.\\n    TimeLockClaim public timeLockClaim;\\n    AmountLockClaim public amountLockClaim;\\n    TimeLockWithdraw public lockWithdraw;\\n    TimeLockDeposit public lockDeposit;\\n\\n    modifier timeLockClaimCheck(address account) {\\n        // We use lockPeriodInSecs == 0 to disable this check\\n        if (timeLockClaim.lockPeriodInSecs != 0) {\\n            require(\\n                block.timestamp > timeLockClaim.lastClaim[account] + timeLockClaim.lockPeriodInSecs,\\n                \\\"LockRules: Claim must wait\\\"\\n            );\\n        }\\n        timeLockClaim.lastClaim[account] = block.timestamp;\\n        _;\\n    }\\n\\n    modifier antiWithdrawCheck(address account) {\\n        // We use lockPeriodInSecs == 0 to disable this check\\n        if (lockWithdraw.lockPeriodInSecs != 0) {\\n            require(\\n                block.timestamp > lockWithdraw.lastWithdraw[account] + lockWithdraw.lockPeriodInSecs,\\n                \\\"LockRules: Withdraw must wait\\\"\\n            );\\n        }\\n        lockWithdraw.lastWithdraw[account] = block.timestamp;\\n        _;\\n    }\\n\\n    modifier antiDepositCheck(address account) {\\n        // We use lockPeriodInSecs == 0 to disable this check\\n        if (lockDeposit.lockPeriodInSecs != 0) {\\n            require(\\n                block.timestamp > lockDeposit.lastDeposit[account] + lockDeposit.lockPeriodInSecs,\\n                \\\"LockRules: Deposit must wait\\\"\\n            );\\n        }\\n        lockDeposit.lastDeposit[account] = block.timestamp;\\n        _;\\n    }\\n\\n    /// @notice set the _lockPeriodInSecs for the anti-compound buffer\\n    /// @param _lockPeriodInSecs amount of time the user must wait between reward withdrawal\\n    function setTimelockClaim(uint256 _lockPeriodInSecs) external onlyOwner {\\n        require(_lockPeriodInSecs <= timeLockLimit, \\\"LockRules: invalid lockPeriodInSecs\\\");\\n        timeLockClaim.lockPeriodInSecs = _lockPeriodInSecs;\\n\\n        emit TimelockClaimSet(_lockPeriodInSecs);\\n    }\\n\\n    function setTimelockDeposit(uint256 _newTimeDeposit) external onlyOwner {\\n        require(_newTimeDeposit <= timeLockLimit, \\\"LockRules: invalid lockPeriodInSecs\\\");\\n        lockDeposit.lockPeriodInSecs = _newTimeDeposit;\\n\\n        emit TimelockDepositSet(_newTimeDeposit);\\n    }\\n\\n    function setTimeLockWithdraw(uint256 _newTimeWithdraw) external onlyOwner {\\n        require(_newTimeWithdraw <= timeLockLimit, \\\"LockRules: invalid lockPeriodInSecs\\\");\\n        lockWithdraw.lockPeriodInSecs = _newTimeWithdraw;\\n\\n        emit TimeLockWithdrawSet(_newTimeWithdraw);\\n    }\\n\\n    function setAmountLockClaim(uint256 _newAmountLockClaim, bool _isEnabled) external onlyOwner {\\n        require(_newAmountLockClaim <= amountLockLimit, \\\"LockRules: invalid newAmountLockClaim\\\");\\n        amountLockClaim.amount = _newAmountLockClaim;\\n        amountLockClaim.claimLockEnabled = _isEnabled;\\n\\n        emit AmountLockClaimSet(_newAmountLockClaim, _isEnabled);\\n    }\\n\\n    function getRemainingTimelockClaim() external view returns (uint256) {\\n        uint256 timeLock = (timeLockClaim.lastClaim[_msgSender()] + timeLockClaim.lockPeriodInSecs);\\n\\n        if (block.timestamp > timeLock) {\\n            return block.timestamp - timeLock;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getRemainingTimelockWithdraw() external view returns (uint256) {\\n        uint256 timeLock = (lockWithdraw.lastWithdraw[_msgSender()] + lockWithdraw.lockPeriodInSecs);\\n\\n        if (block.timestamp > timeLock) {\\n            return block.timestamp - timeLock;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getRemainingTimelockDeposit() external view returns (uint256) {\\n        uint256 timeLock = (lockDeposit.lastDeposit[_msgSender()] + lockDeposit.lockPeriodInSecs);\\n\\n        if (block.timestamp > timeLock) {\\n            return block.timestamp - timeLock;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce67866844c6a53b808e2309a1f3f2539b4e0f1a32e1f7722772e606438d8c83\",\"license\":\"MIT\"},\"src/solc_0.8/defi/rules/RequirementsRules.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-0.8/utils/math/Math.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract RequirementsRules is Ownable {\\n    using Address for address;\\n\\n    // we limited the number of Ids and contracts that we can have in the lists\\n    // to avoid the risk of DoS caused by gas limits being exceeded during the iterations\\n    uint256 public idsLimit = 64;\\n    uint256 public contractsLimit = 4;\\n\\n    // maxStake amount allowed if user has no ERC721 or ERC1155\\n    uint256 public maxStakeOverall;\\n\\n    struct ERC721RequirementRule {\\n        uint256[] ids;\\n        bool balanceOf;\\n        uint256 minAmountBalanceOf;\\n        uint256 maxAmountBalanceOf;\\n        uint256 minAmountId;\\n        uint256 maxAmountId;\\n        uint256 index;\\n    }\\n\\n    struct ERC1155RequirementRule {\\n        uint256[] ids;\\n        uint256 minAmountId;\\n        uint256 maxAmountId;\\n        uint256 index;\\n    }\\n\\n    mapping(IERC721 => ERC721RequirementRule) internal _listERC721;\\n    mapping(IERC1155 => ERC1155RequirementRule) internal _listERC1155;\\n    IERC721[] internal _listERC721Index;\\n    IERC1155[] internal _listERC1155Index;\\n\\n    event ERC1155RequirementListSet(\\n        address indexed contractERC1155,\\n        uint256[] ids,\\n        uint256 minAmountId,\\n        uint256 maxAmountId\\n    );\\n    event ERC721RequirementListSet(\\n        address indexed contractERC721,\\n        uint256[] ids,\\n        bool balanceOf,\\n        uint256 minAmountBalanceOf,\\n        uint256 maxAmountBalanceOf,\\n        uint256 minAmountId,\\n        uint256 maxAmountId\\n    );\\n    event MaxStakeOverallSet(uint256 newMaxStake, uint256 oldMaxStake);\\n    event ERC11551RequirementListDeleted(address indexed contractERC1155);\\n    event ERC721RequirementListDeleted(address indexed contractERC721);\\n\\n    modifier isContract(address account) {\\n        require(account.isContract(), \\\"RequirementsRules: is not contract\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkRequirements(\\n        address account,\\n        uint256 amount,\\n        uint256 balanceOf\\n    ) {\\n        uint256 maxStakeERC721 = checkAndGetERC721Stake(account);\\n        uint256 maxStakeERC1155 = checkAndGetERC1155Stake(account);\\n        uint256 maxAllowed = _maxStakeAllowedCalculator(maxStakeERC721, maxStakeERC1155);\\n\\n        if (maxAllowed != 0) {\\n            require(amount + balanceOf <= maxAllowed, \\\"RequirementsRules: maxAllowed\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    modifier isERC721MemberList(address contractERC721) {\\n        require(\\n            isERC721MemberRequirementList(IERC721(contractERC721)),\\n            \\\"RequirementsRules: contract is not in the list\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isERC1155MemberList(address contractERC1155) {\\n        require(\\n            isERC1155MemberRequirementList(IERC1155(contractERC1155)),\\n            \\\"RequirementsRules: contract is not in the list\\\"\\n        );\\n        _;\\n    }\\n\\n    // if user has not erc721 or erc1155\\n    function setMaxStakeOverall(uint256 newMaxStake) external onlyOwner {\\n        uint256 oldMaxStake = maxStakeOverall;\\n        maxStakeOverall = newMaxStake;\\n\\n        emit MaxStakeOverallSet(newMaxStake, oldMaxStake);\\n    }\\n\\n    function setERC721RequirementList(\\n        address contractERC721,\\n        uint256[] memory ids,\\n        bool balanceOf,\\n        uint256 minAmountBalanceOf,\\n        uint256 maxAmountBalanceOf,\\n        uint256 minAmountId,\\n        uint256 maxAmountId\\n    ) external onlyOwner isContract(contractERC721) {\\n        require(\\n            (balanceOf == true && minAmountBalanceOf > 0 && maxAmountBalanceOf > 0) ||\\n                (balanceOf == false && ids.length > 0 && minAmountId > 0 && maxAmountId > 0 && ids.length <= idsLimit),\\n            \\\"RequirementRules: invalid list\\\"\\n        );\\n        IERC721 newContract = IERC721(contractERC721);\\n\\n        if (ids.length != 0) {\\n            _listERC721[newContract].ids = ids;\\n        }\\n        _listERC721[newContract].minAmountBalanceOf = minAmountBalanceOf;\\n        _listERC721[newContract].maxAmountBalanceOf = maxAmountBalanceOf;\\n        _listERC721[newContract].minAmountId = minAmountId;\\n        _listERC721[newContract].maxAmountId = maxAmountId;\\n        _listERC721[newContract].balanceOf = balanceOf;\\n\\n        // if it's a new member create a new registry, instead, only update\\n        if (isERC721MemberRequirementList(newContract) == false) {\\n            // Limiting the size of the array (interations) to avoid the risk of DoS.\\n            require(contractsLimit > _listERC721Index.length, \\\"RequirementsRules: contractsLimit exceeded\\\");\\n            _listERC721Index.push(newContract);\\n            _listERC721[newContract].index = _listERC721Index.length - 1;\\n        }\\n\\n        emit ERC721RequirementListSet(\\n            contractERC721,\\n            ids,\\n            balanceOf,\\n            minAmountBalanceOf,\\n            maxAmountBalanceOf,\\n            minAmountId,\\n            maxAmountId\\n        );\\n    }\\n\\n    function setERC1155RequirementList(\\n        address contractERC1155,\\n        uint256[] memory ids,\\n        uint256 minAmountId,\\n        uint256 maxAmountId\\n    ) external onlyOwner isContract(contractERC1155) {\\n        require(\\n            ids.length > 0 && minAmountId > 0 && maxAmountId > 0 && ids.length <= idsLimit,\\n            \\\"RequirementRules: invalid list\\\"\\n        );\\n        IERC1155 newContract = IERC1155(contractERC1155);\\n        _listERC1155[newContract].ids = ids;\\n        _listERC1155[newContract].minAmountId = minAmountId;\\n        _listERC1155[newContract].maxAmountId = maxAmountId;\\n\\n        // if it's a new member create a new registry, instead, only update\\n        if (isERC1155MemberRequirementList(newContract) == false) {\\n            // Limiting the size of the array (interations) to avoid the risk of DoS.\\n            require(contractsLimit > _listERC1155Index.length, \\\"RequirementsRules: contractsLimit exceeded\\\");\\n            _listERC1155Index.push(newContract);\\n            _listERC1155[newContract].index = _listERC1155Index.length - 1;\\n        }\\n\\n        emit ERC1155RequirementListSet(contractERC1155, ids, minAmountId, maxAmountId);\\n    }\\n\\n    function getERC721RequirementList(address contractERC721)\\n        external\\n        view\\n        isContract(contractERC721)\\n        isERC721MemberList(contractERC721)\\n        returns (ERC721RequirementRule memory)\\n    {\\n        return _listERC721[IERC721(contractERC721)];\\n    }\\n\\n    function getERC1155RequirementList(address contractERC1155)\\n        external\\n        view\\n        isContract(contractERC1155)\\n        isERC1155MemberList(contractERC1155)\\n        returns (ERC1155RequirementRule memory)\\n    {\\n        return _listERC1155[IERC1155(contractERC1155)];\\n    }\\n\\n    function deleteERC721RequirementList(address contractERC721)\\n        external\\n        onlyOwner\\n        isContract(contractERC721)\\n        isERC721MemberList(contractERC721)\\n    {\\n        IERC721 reqContract = IERC721(contractERC721);\\n        uint256 indexToDelete = _listERC721[reqContract].index;\\n        IERC721 addrToMove = _listERC721Index[_listERC721Index.length - 1];\\n        _listERC721Index[indexToDelete] = addrToMove;\\n        _listERC721[addrToMove].index = indexToDelete;\\n        _listERC721Index.pop();\\n\\n        emit ERC721RequirementListDeleted(contractERC721);\\n    }\\n\\n    function deleteERC1155RequirementList(address contractERC1155)\\n        external\\n        onlyOwner\\n        isContract(contractERC1155)\\n        isERC1155MemberList(contractERC1155)\\n    {\\n        IERC1155 reqContract = IERC1155(contractERC1155);\\n        uint256 indexToDelete = _listERC1155[reqContract].index;\\n        IERC1155 addrToMove = _listERC1155Index[_listERC1155Index.length - 1];\\n        _listERC1155Index[indexToDelete] = addrToMove;\\n        _listERC1155[addrToMove].index = indexToDelete;\\n        _listERC1155Index.pop();\\n\\n        emit ERC11551RequirementListDeleted(contractERC1155);\\n    }\\n\\n    function isERC721MemberRequirementList(IERC721 reqContract) public view returns (bool) {\\n        return (_listERC721Index.length != 0) && (_listERC721Index[_listERC721[reqContract].index] == reqContract);\\n    }\\n\\n    function isERC1155MemberRequirementList(IERC1155 reqContract) public view returns (bool) {\\n        return (_listERC1155Index.length != 0) && (_listERC1155Index[_listERC1155[reqContract].index] == reqContract);\\n    }\\n\\n    function getERC721MaxStake(address account) public view returns (uint256) {\\n        uint256 _maxStake = 0;\\n        for (uint256 i = 0; i < _listERC721Index.length; i++) {\\n            uint256 balanceOf = 0;\\n            uint256 balanceOfId = 0;\\n            IERC721 reqContract = _listERC721Index[i];\\n\\n            if (_listERC721[reqContract].balanceOf == true) {\\n                balanceOf = reqContract.balanceOf(account);\\n            } else {\\n                balanceOfId = getERC721BalanceId(reqContract, account);\\n            }\\n\\n            _maxStake =\\n                _maxStake +\\n                (balanceOf *\\n                    _listERC721[reqContract].maxAmountBalanceOf +\\n                    balanceOfId *\\n                    _listERC721[reqContract].maxAmountId);\\n        }\\n\\n        return _maxStake;\\n    }\\n\\n    function getERC1155MaxStake(address account) public view returns (uint256) {\\n        uint256 _maxStake = 0;\\n\\n        for (uint256 i = 0; i < _listERC1155Index.length; i++) {\\n            uint256 _totalBal = 0;\\n            IERC1155 reqContract = _listERC1155Index[i];\\n\\n            uint256 bal = getERC1155BalanceId(reqContract, account);\\n\\n            _totalBal = _totalBal + bal;\\n\\n            _maxStake = _maxStake + (_totalBal * _listERC1155[reqContract].maxAmountId);\\n        }\\n\\n        return _maxStake;\\n    }\\n\\n    function maxStakeAllowedCalculator(address account) external view returns (uint256) {\\n        uint256 maxStakeERC721 = getERC721MaxStake(account);\\n        uint256 maxStakeERC1155 = getERC1155MaxStake(account);\\n        return _maxStakeAllowedCalculator(maxStakeERC721, maxStakeERC1155);\\n    }\\n\\n    function getERC721BalanceId(IERC721 reqContract, address account) public view returns (uint256) {\\n        uint256 balanceOfId = 0;\\n\\n        for (uint256 j = 0; j < _listERC721[reqContract].ids.length; j++) {\\n            address owner = reqContract.ownerOf(_listERC721[reqContract].ids[j]);\\n            if (owner == account) {\\n                ++balanceOfId;\\n            }\\n        }\\n\\n        return balanceOfId;\\n    }\\n\\n    function getERC1155BalanceId(IERC1155 reqContract, address account) public view returns (uint256) {\\n        uint256 balanceOfId = 0;\\n\\n        for (uint256 j = 0; j < _listERC1155[reqContract].ids.length; j++) {\\n            uint256 bal = reqContract.balanceOf(account, _listERC1155[reqContract].ids[j]);\\n\\n            balanceOfId = balanceOfId + bal;\\n        }\\n\\n        return balanceOfId;\\n    }\\n\\n    function checkAndGetERC1155Stake(address account) public view returns (uint256) {\\n        uint256 _maxStake = 0;\\n        for (uint256 i = 0; i < _listERC1155Index.length; i++) {\\n            uint256 _totalBal = 0;\\n            IERC1155 reqContract = _listERC1155Index[i];\\n\\n            uint256 balanceId = getERC1155BalanceId(reqContract, account);\\n            if (_listERC1155[reqContract].ids.length > 0) {\\n                require(balanceId >= _listERC1155[reqContract].minAmountId, \\\"RequirementsRules: balanceId\\\");\\n            }\\n\\n            _totalBal = _totalBal + balanceId;\\n            _maxStake = _maxStake + (_totalBal * _listERC1155[reqContract].maxAmountId);\\n        }\\n        return _maxStake;\\n    }\\n\\n    function checkAndGetERC721Stake(address account) public view returns (uint256) {\\n        uint256 _maxStake = 0;\\n        for (uint256 i = 0; i < _listERC721Index.length; i++) {\\n            uint256 balanceOf = 0;\\n            IERC721 reqContract = _listERC721Index[i];\\n\\n            uint256 balanceOfId = getERC721BalanceId(reqContract, account);\\n            if (_listERC721[reqContract].ids.length > 0) {\\n                require(balanceOfId >= _listERC721[reqContract].minAmountId, \\\"RequirementsRules: balanceId\\\");\\n            }\\n\\n            if (_listERC721[reqContract].balanceOf == true) {\\n                require(\\n                    reqContract.balanceOf(account) >= _listERC721[reqContract].minAmountBalanceOf,\\n                    \\\"RequirementsRules: balanceOf\\\"\\n                );\\n                balanceOf = reqContract.balanceOf(account);\\n            }\\n\\n            _maxStake =\\n                _maxStake +\\n                (balanceOf *\\n                    _listERC721[reqContract].maxAmountBalanceOf +\\n                    balanceOfId *\\n                    _listERC721[reqContract].maxAmountId);\\n        }\\n        return _maxStake;\\n    }\\n\\n    function _maxStakeAllowedCalculator(uint256 maxStakeERC721, uint256 maxStakeERC1155)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 maxAllowed = maxStakeOverall;\\n\\n        if (maxStakeERC721 + maxStakeERC1155 > 0) {\\n            if (maxStakeOverall > 0) {\\n                maxAllowed = Math.min(maxAllowed, maxStakeERC721 + maxStakeERC1155);\\n            } else {\\n                maxAllowed = maxStakeERC721 + maxStakeERC1155;\\n            }\\n        } else {\\n            maxAllowed = maxStakeOverall;\\n        }\\n\\n        return maxAllowed;\\n    }\\n}\\n\",\"keccak256\":\"0x9c17b229acaab801fee7426ff6194488dea067cb6d8c5abd546813f77c2a5a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040603e556004603f553480156200001b57600080fd5b5060405162005874380380620058748339810160408190526200003e91620002b9565b82620000536200004d620001b9565b620001d6565b62000072816001600160a01b03166200022660201b6200403b1760201c565b620000d05760405162461bcd60e51b8152602060048201526024808201527f5374616b65546f6b656e577261707065723a206973206e6f74206120636f6e746044820152631c9858dd60e21b60648201526084015b60405180910390fd5b600180546001600160a01b0319166001600160a01b039283161781556045556046805460ff60a01b191690556200011590831662000226602090811b6200403b17901c565b6200016e5760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401620000c7565b604880546001600160a01b0319166001600160a01b038416179055620001b081604680546001600160a01b0319166001600160a01b0392909216919091179055565b50505062000325565b6000620001d06200022c60201b620040411760201c565b90505b90565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3b151590565b6046546000906001600160a01b0316331415620002b1576018361015620002a15760405162461bcd60e51b815260206004820152602260248201527f4552433237373148616e646c657256323a20496e76616c6964206d73672e6461604482015261746160f01b6064820152608401620000c7565b5060131936013560601c620001d3565b5033620001d3565b600080600060608486031215620002ce578283fd5b8351620002db816200030c565b6020850151909350620002ee816200030c565b604085015190925062000301816200030c565b809150509250925092565b6001600160a01b03811681146200032257600080fd5b50565b61553f80620003356000396000f3fe608060405234801561001057600080fd5b50600436106104205760003560e01c80638456cb5911610235578063cd3daf9d11610135578063df136d65116100c8578063e9fad8ee11610097578063f2fde38b1161007c578063f2fde38b146108b3578063f7c618c1146108c6578063fc17e07b146108d957610420565b8063e9fad8ee146108a2578063f0f49856146108aa57610420565b8063df136d651461086a578063dfeb943914610873578063e255911214610886578063e72f6e301461088f57610420565b8063d64791f811610104578063d64791f814610808578063d7805ece1461081b578063da74222814610844578063db6beab71461085757610420565b8063cd3daf9d146107d2578063ce1b815f146107da578063d1b844e6146107eb578063d2fe29d3146107f557610420565b8063a3c5b4d6116101c8578063a8863bb111610197578063b01658401161017c578063b0165840146107a4578063bd8e10f4146107ac578063bfcd5953146107bf57610420565b8063a8863bb11461077e578063accb04bd1461079157610420565b8063a3c5b4d61461073b578063a425632f1461074e578063a5cac0a114610758578063a694fc3a1461076b57610420565b80638da5cb5b116102045780638da5cb5b146106fa57806396769e891461070b5780639c48f2901461071e578063a0ed0d8e1461072857610420565b80638456cb59146106b757806387f260ce146106bf5780638aee8127146106c75780638b876347146106da57610420565b80633f4ba83a116103405780635c9415d3116102d35780636e15349b116102a257806370a082311161028757806370a0823114610666578063715018a61461068f5780637f7bc9061461069757610420565b80636e15349b1461064b5780636e6982af1461065e57610420565b80635c9415d3146106095780635c975abb1461061c578063618891101461062f57806369354e5c1461064257610420565b80634d49d3991161030f5780634d49d399146105c457806351ed6a30146105ce578063572b6c05146105df5780635ae64bd81461060157610420565b80633f4ba83a14610583578063431e48af1461058b578063446ed03d1461059e578063495bb729146105b157610420565b8063216213d5116103b85780632e0cefd7116103875780632e0cefd71461053d5780632e1a7d4d1461056057806337c08923146105735780633d18b9121461057b57610420565b8063216213d5146104c65780632b061ca2146104d95780632b7f01fc146104ff5780632c34a4591461052a57610420565b80630d59f435116103f45780630d59f435146104935780631657e4891461049b57806318160ddd146104ae5780631860f70d146104b657610420565b80628cc262146104255780630397d4581461044b5780630700037d146104605780630823a11614610480575b600080fd5b610438610433366004614ff1565b6108f9565b6040519081526020015b60405180910390f35b61045e610459366004614ff1565b610937565b005b61043861046e366004614ff1565b604c6020526000908152604090205481565b61043861048e366004614ff1565b610bfc565b610438610eda565b6104386104a9366004614ff1565b610f43565b600254610438565b610438683635c9adc5dea0000081565b61045e6104d4366004614ff1565b610f70565b6038546039546104ea919060ff1682565b60408051928352901515602083015201610442565b604954610512906001600160a01b031681565b6040516001600160a01b039091168152602001610442565b610438610538366004614ff1565b61120c565b61055061054b366004614ff1565b6112b6565b6040519015158152602001610442565b61045e61056e3660046151fc565b611320565b604d54610438565b61045e611404565b61045e6114dc565b61045e61059936600461522c565b61155f565b6104386105ac366004614ff1565b6116ac565b61045e6105bf366004614ff1565b6117e0565b61043862ed4e0081565b6001546001600160a01b0316610512565b6105506105ed366004614ff1565b6046546001600160a01b0390811691161490565b610438611a7c565b61045e6106173660046151fc565b611ba6565b610550604654600160a01b900460ff1690565b61045e61063d3660046151fc565b611cba565b61043860405481565b6104386106593660046151cf565b611dc7565b610438611ef8565b610438610674366004614ff1565b6001600160a01b031660009081526003602052604090205490565b61045e611f0b565b6106aa6106a5366004614ff1565b611ff2565b6040516104429190615380565b61045e6121d1565b610438612252565b61045e6106d5366004614ff1565b612265565b6104386106e8366004614ff1565b604b6020526000908152604090205481565b6000546001600160a01b0316610512565b604a54610512906001600160a01b031681565b6036546104389081565b61045e6107363660046150ae565b612525565b61045e610749366004615029565b612815565b603a546104389081565b610550610766366004614ff1565b612b60565b61045e6107793660046151fc565b612bae565b61043861078c3660046151cf565b6130b4565b61045e61079f36600461510c565b6131cf565b61045e613336565b61045e6107ba366004614ff1565b61333e565b61045e6107cd3660046151fc565b613495565b61043861354b565b6046546001600160a01b0316610512565b603c546104389081565b61045e6108033660046151fc565b613562565b61045e610816366004615144565b61366f565b610438610829366004614ff1565b6001600160a01b03166000908152604e602052604090205490565b61045e610852366004614ff1565b6136fa565b610438610865366004614ff1565b6137f9565b61043860475481565b61045e610881366004614ff1565b61396d565b610438603e5481565b61045e61089d366004614ff1565b6139da565b61045e613c49565b610438603f5481565b61045e6108c1366004614ff1565b613d96565b604854610512906001600160a01b031681565b6108ec6108e7366004614ff1565b613e97565b604051610442919061533a565b600061090c82610907614102565b6141d1565b6001600160a01b0383166000908152604c602052604090205461092f91906153e7565b90505b919050565b806001600160a01b0381163b61099f5760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b60648201526084015b60405180910390fd5b6109a7614235565b6001600160a01b03166109c26000546001600160a01b031690565b6001600160a01b031614610a185760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b816001600160a01b038116610a6f5760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b6040516370a0823160e01b815230600482015283906001600160a01b038216906370a082319060240160206040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190615214565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190615214565b1115610bd75760405162461bcd60e51b815260206004820152602560248201527f4552433230526577617264506f6f6c3a20696e73756666696369656e7420626160448201527f6c616e63650000000000000000000000000000000000000000000000000000006064820152608401610996565b600180546001600160a01b0319166001600160a01b0392909216919091179055505050565b600080805b604354811015610ed35760008060438381548110610c2f57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b03169150610c4f82886130b4565b6001600160a01b03831660009081526041602052604090205490915015610cdb576001600160a01b038216600090815260416020526040902060040154811015610cdb5760405162461bcd60e51b815260206004820152601c60248201527f526571756972656d656e747352756c65733a2062616c616e63654964000000006044820152606401610996565b6001600160a01b038216600090815260416020526040902060019081015460ff1615151415610e5b576001600160a01b03828116600081815260416020526040908190206002015490516370a0823160e01b8152928a166004840152916370a082319060240160206040518083038186803b158015610d5957600080fd5b505afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d919190615214565b1015610ddf5760405162461bcd60e51b815260206004820152601c60248201527f526571756972656d656e747352756c65733a2062616c616e63654f66000000006044820152606401610996565b6040516370a0823160e01b81526001600160a01b0388811660048301528316906370a082319060240160206040518083038186803b158015610e2057600080fd5b505afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190615214565b92505b6001600160a01b038216600090815260416020526040902060050154610e819082615413565b6001600160a01b038316600090815260416020526040902060030154610ea79085615413565b610eb191906153e7565b610ebb90866153e7565b94505050508080610ecb90615475565b915050610c01565b5092915050565b603c546000908190603d82610eed614235565b6001600160a01b03166001600160a01b0316815260200190815260200160002054610f1891906153e7565b905080421115610f3457610f2c8142615432565b915050610f40565b6000915050610f40565b505b90565b600080610f4f836137f9565b90506000610f5c8461120c565b9050610f68828261423f565b949350505050565b610f78614235565b6001600160a01b0316610f936000546001600160a01b031690565b6001600160a01b031614610fe95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b806001600160a01b0381163b61104c5760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b81611056816112b6565b6110c85760405162461bcd60e51b815260206004820152602e60248201527f526571756972656d656e747352756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610996565b6001600160a01b03831660009081526041602052604081206006015460438054869391906110f890600190615432565b8154811061111657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604380546001600160a01b03909216925082918490811061115357634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260419091526040902060060182905560438054806111ae57634e487b7160e01b600052603160045260246000fd5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038816917f47e3c945866c02102662275722b0b8ae9769ad96d6ddcc8a4c6d8d74ff16706291a2505050505050565b600080805b604454811015610ed3576000806044838154811061123f57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b0316915061125f8288611dc7565b905061126b81846153e7565b6001600160a01b0383166000908152604260205260409020600201549093506112949084615413565b61129e90866153e7565b945050505080806112ae90615475565b915050611211565b6043546000901580159061092f57506001600160a01b03821660008181526041602052604090206006015460438054909190811061130457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161492915050565b600260455414156113735760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610996565b600260455561138b604654600160a01b900460ff1690565b156113cb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b6113db6113d6614235565b614295565b6113ec6113e6614235565b826142a6565b6113fc6113f7614235565b614430565b506001604555565b600260455414156114575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610996565b600260455561146f604654600160a01b900460ff1690565b156114af5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b6114ba6113d6614235565b6114ca6114c5614235565b6144ca565b6114d56113f7614235565b6001604555565b6114e4614235565b6001600160a01b03166114ff6000546001600160a01b031690565b6001600160a01b0316146115555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b61155d61469b565b565b611567614235565b6001600160a01b03166115826000546001600160a01b031690565b6001600160a01b0316146115d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b683635c9adc5dea000008211156116575760405162461bcd60e51b815260206004820152602560248201527f4c6f636b52756c65733a20696e76616c6964206e6577416d6f756e744c6f636b60448201527f436c61696d0000000000000000000000000000000000000000000000000000006064820152608401610996565b60388290556039805460ff19168215159081179091556040805184815260208101929092527fae4d8a2a6d24c92b12bc1ad576eb89a6c352b143519ecbc978c0f5d75bb1d9c791015b60405180910390a15050565b600080805b604454811015610ed357600080604483815481106116df57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b031691506116ff8288611dc7565b6001600160a01b0383166000908152604260205260409020549091501561178b576001600160a01b03821660009081526042602052604090206001015481101561178b5760405162461bcd60e51b815260206004820152601c60248201527f526571756972656d656e747352756c65733a2062616c616e63654964000000006044820152606401610996565b61179581846153e7565b6001600160a01b0383166000908152604260205260409020600201549093506117be9084615413565b6117c890866153e7565b945050505080806117d890615475565b9150506116b1565b6117e8614235565b6001600160a01b03166118036000546001600160a01b031690565b6001600160a01b0316146118595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b806001600160a01b0381163b6118bc5760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b816118c681612b60565b6119385760405162461bcd60e51b815260206004820152602e60248201527f526571756972656d656e747352756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610996565b6001600160a01b038316600090815260426020526040812060030154604480548693919061196890600190615432565b8154811061198657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604480546001600160a01b0390921692508291849081106119c357634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526042909152604090206003018290556044805480611a1e57634e487b7160e01b600052603160045260246000fd5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038816917f08617ff2b2e08e21be93ba4e04edc58f73671d33133725194bb67fddd33b1eb091a2505050505050565b6001546048546000916001600160a01b03918216911614611b19576048546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b129190615214565b9050610f40565b6002546001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611b5f57600080fd5b505afa158015611b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b979190615214565b611ba19190615432565b905090565b611bae614235565b6001600160a01b0316611bc96000546001600160a01b031690565b6001600160a01b031614611c1f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b62ed4e00811115611c7e5760405162461bcd60e51b815260206004820152602360248201527f4c6f636b52756c65733a20696e76616c6964206c6f636b506572696f64496e5360448201526265637360e81b6064820152608401610996565b603a8190556040518181527f0a34a7f0967a1c454102f82743b9dcf955188e0a030905740e2c8a5b39910660906020015b60405180910390a150565b611cc2614235565b6001600160a01b0316611cdd6000546001600160a01b031690565b6001600160a01b031614611d335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b62ed4e00811115611d925760405162461bcd60e51b815260206004820152602360248201527f4c6f636b52756c65733a20696e76616c6964206c6f636b506572696f64496e5360448201526265637360e81b6064820152608401610996565b60368190556040518181527f1bc5ec4d2816c06ea16ad9f0e99eb3c74517b041ed9d0a7103dd6f775cd66f7c90602001611caf565b600080805b6001600160a01b038516600090815260426020526040902054811015611ef0576001600160a01b0385166000818152604260205260408120805491929162fdd58e91889186908110611e2e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015611e9657600080fd5b505afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece9190615214565b9050611eda81846153e7565b9250508080611ee890615475565b915050611dcc565b509392505050565b6036546000908190603782610eed614235565b611f13614235565b6001600160a01b0316611f2e6000546001600160a01b031690565b6001600160a01b031614611f845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b60405162461bcd60e51b815260206004820152602860248201527f4552433230526577617264506f6f6c3a2063616e27742072656e6f756e63654f60448201527f776e6572736869700000000000000000000000000000000000000000000000006064820152608401610996565b6120346040518060e001604052806060815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b816001600160a01b0381163b6120975760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b826120a1816112b6565b6121135760405162461bcd60e51b815260206004820152602e60248201527f526571756972656d656e747352756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610996565b6001600160a01b038416600090815260416020908152604091829020825181546101009381028201840190945260e08101848152909391928492849184018282801561217e57602002820191906000526020600020905b81548152602001906001019080831161216a575b5050509183525050600182015460ff1615156020820152600282015460408201526003820154606082015260048201546080820152600582015460a082015260069091015460c090910152949350505050565b6121d9614235565b6001600160a01b03166121f46000546001600160a01b031690565b6001600160a01b03161461224a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b61155d614768565b603a546000908190603b82610eed614235565b806001600160a01b0381163b6122c85760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401610996565b6122d0614235565b6001600160a01b03166122eb6000546001600160a01b031690565b6001600160a01b0316146123415760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b816001600160a01b0381166123985760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b6040516370a0823160e01b815230600482015283906001600160a01b038216906370a082319060240160206040518083038186803b1580156123d957600080fd5b505afa1580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190615214565b6048546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561245457600080fd5b505afa158015612468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248c9190615214565b11156125005760405162461bcd60e51b815260206004820152602560248201527f4552433230526577617264506f6f6c3a20696e73756666696369656e7420626160448201527f6c616e63650000000000000000000000000000000000000000000000000000006064820152608401610996565b604880546001600160a01b0319166001600160a01b0392909216919091179055505050565b61252d614235565b6001600160a01b03166125486000546001600160a01b031690565b6001600160a01b03161461259e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b836001600160a01b0381163b6126015760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b600084511180156126125750600083115b801561261e5750600082115b801561262d5750603e54845111155b6126795760405162461bcd60e51b815260206004820152601e60248201527f526571756972656d656e7452756c65733a20696e76616c6964206c69737400006044820152606401610996565b6001600160a01b0385166000908152604260209081526040909120855187926126a6929190880190614efd565b506001600160a01b0381166000908152604260205260409020600181018590556002018390556126d581612b60565b6127c857604454603f54116127525760405162461bcd60e51b815260206004820152602a60248201527f526571756972656d656e747352756c65733a20636f6e7472616374734c696d6960448201527f74206578636565646564000000000000000000000000000000000000000000006064820152608401610996565b604480546001808201835560008390527f9b22d3d61959b4d3528b1d8ba932c96fbe302b36a1aad1d95cab54f9e0a135ea90910180546001600160a01b0319166001600160a01b03851617905590546127ab9190615432565b6001600160a01b0382166000908152604260205260409020600301555b856001600160a01b03167f586adb7578e979f45e368cc35f5a22d692757ded182824b2c42923c3600ecd69868686604051612805939291906152e2565b60405180910390a2505050505050565b61281d614235565b6001600160a01b03166128386000546001600160a01b031690565b6001600160a01b03161461288e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b866001600160a01b0381163b6128f15760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b60018615151480156129035750600085115b801561290f5750600084115b8061294b575085158015612924575060008751115b80156129305750600083115b801561293c5750600082115b801561294b5750603e54875111155b6129975760405162461bcd60e51b815260206004820152601e60248201527f526571756972656d656e7452756c65733a20696e76616c6964206c69737400006044820152606401610996565b86518890156129cb576001600160a01b038116600090815260416020908152604090912089516129c9928b0190614efd565b505b6001600160a01b038116600090815260416020526040902060028101879055600381018690556004810185905560058101849055600101805460ff1916881515179055612a17816112b6565b612b0a57604354603f5411612a945760405162461bcd60e51b815260206004820152602a60248201527f526571756972656d656e747352756c65733a20636f6e7472616374734c696d6960448201527f74206578636565646564000000000000000000000000000000000000000000006064820152608401610996565b604380546001808201835560008390527f9690ad99d6ce244efa8a0f6c2d04036d3b33a9474db32a71b71135c69510279390910180546001600160a01b0319166001600160a01b0385161790559054612aed9190615432565b6001600160a01b0382166000908152604160205260409020600601555b886001600160a01b03167fe41df969317a5283b930ab971b419d925fc5c58516b283b7bee55e29af3734fb898989898989604051612b4d969594939291906152a6565b60405180910390a2505050505050505050565b6044546000901580159061092f57506001600160a01b03821660008181526042602052604090206003015460448054909190811061130457634e487b7160e01b600052603260045260246000fd5b60026045541415612c015760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610996565b6002604555612c19604654600160a01b900460ff1690565b15612c595760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b612c61614235565b603c5415612cdd57603c546001600160a01b0382166000908152603d6020526040902054612c8f91906153e7565b4211612cdd5760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b52756c65733a204465706f736974206d7573742077616974000000006044820152606401610996565b6001600160a01b0381166000908152603d60205260409020429055612d00614235565b8260036000612d0d614235565b6001600160a01b03166001600160a01b03168152602001908152602001600020546000612d3984610bfc565b90506000612d46856116ac565b90506000612d54838361423f565b90508015612db55780612d6785876153e7565b1115612db55760405162461bcd60e51b815260206004820152601d60248201527f526571756972656d656e747352756c65733a206d6178416c6c6f7765640000006044820152606401610996565b60008811612e055760405162461bcd60e51b815260206004820152601f60248201527f4552433230526577617264506f6f6c3a2043616e6e6f74207374616b652030006044820152606401610996565b60376000612e11614235565b6001600160a01b03168152602081019190915260400160002054612e57574260376000612e3c614235565b6001600160a01b031681526020810191909152604001600020555b42603d6000612e64614235565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000604d546000148015612ea65750604a546001600160a01b031615155b15612f3457604a60009054906101000a90046001600160a01b03166001600160a01b0316630572b0cc6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ef957600080fd5b505afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f319190615214565b90505b612f3f6113d6614235565b612f4889614812565b612f536113f7614235565b6000604e6000612f61614235565b6001600160a01b03166001600160a01b031681526020019081526020016000205411612ff55760405162461bcd60e51b815260206004820152602960248201527f4552433230526577617264506f6f6c3a206e6f7420656e6f75676820636f6e7460448201527f7269627574696f6e7300000000000000000000000000000000000000000000006064820152608401610996565b801561305a5780604c6000613008614235565b6001600160a01b03166001600160a01b031681526020019081526020016000205461303391906153e7565b604c600061303f614235565b6001600160a01b031681526020810191909152604001600020555b613062614235565b6001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8a60405161309c91815260200190565b60405180910390a25050600160455550505050505050565b600080805b6001600160a01b038516600090815260416020526040902054811015611ef0576001600160a01b03851660008181526041602052604081208054919291636352211e91908590811061311b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b815260040161314491815260200190565b60206040518083038186803b15801561315c57600080fd5b505afa158015613170573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613194919061500d565b9050846001600160a01b0316816001600160a01b031614156131bc576131b983615475565b92505b50806131c781615475565b9150506130b9565b816001600160a01b0381163b6132325760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401610996565b61323a614235565b6001600160a01b03166132556000546001600160a01b031690565b6001600160a01b0316146132ab5760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b826001600160a01b0381166133025760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b8215613310576133106148f0565b5050604a80546001600160a01b0319166001600160a01b03939093169290921790915550565b61155d6148f0565b806001600160a01b0381163b6133a15760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401610996565b6133a9614235565b6001600160a01b03166133c46000546001600160a01b031690565b6001600160a01b03161461341a5760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b816001600160a01b0381166134715760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b5050604980546001600160a01b0319166001600160a01b0392909216919091179055565b61349d614235565b6001600160a01b03166134b86000546001600160a01b031690565b6001600160a01b03161461350e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b6040805482825581518381526020810182905290917fe71352959b0ea69ae334d4403e7b41245e1f9e6270d8664f4d2ae2477447785891016116a0565b6000613555614102565b604754611ba191906153e7565b61356a614235565b6001600160a01b03166135856000546001600160a01b031690565b6001600160a01b0316146135db5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b62ed4e0081111561363a5760405162461bcd60e51b815260206004820152602360248201527f4c6f636b52756c65733a20696e76616c6964206c6f636b506572696f64496e5360448201526265637360e81b6064820152608401610996565b603c8190556040518181527fd5a5a9291a89dfff7924900a31224aa9b6afed79f5124add369f4a807f40f59790602001611caf565b6136776148f0565b60005b818110156136f55760008383838181106136a457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906136b99190614ff1565b90506001600160a01b0381166136cf57506136e3565b6136d88161498c565b6136e181614430565b505b806136ed81615475565b91505061367a565b505050565b806001600160a01b0381163b61375d5760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401610996565b613765614235565b6001600160a01b03166137806000546001600160a01b031690565b6001600160a01b0316146137d65760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b50604680546001600160a01b0319166001600160a01b0392909216919091179055565b600080805b604354811015610ed35760008060006043848154811061382e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083526041909152604090912060019081015491925060ff909116151514156138e8576040516370a0823160e01b81526001600160a01b0388811660048301528216906370a082319060240160206040518083038186803b1580156138a957600080fd5b505afa1580156138bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e19190615214565b92506138f5565b6138f281886130b4565b91505b6001600160a01b03811660009081526041602052604090206005015461391b9083615413565b6001600160a01b0382166000908152604160205260409020600301546139419085615413565b61394b91906153e7565b61395590866153e7565b9450505050808061396590615475565b9150506137fe565b806001600160a01b0381166139c45760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b6139cd82614295565b6139d682614430565b5050565b6139e2614235565b6001600160a01b03166139fd6000546001600160a01b031690565b6001600160a01b031614613a535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b613a66604654600160a01b900460ff1690565b613ab25760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610996565b806001600160a01b038116613b095760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b6001546048546000916001600160a01b0391821691161415613bb4576002546048546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613b6b57600080fd5b505afa158015613b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba39190615214565b613bad9190615432565b9050613c32565b6048546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613bf757600080fd5b505afa158015613c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2f9190615214565b90505b6048546136f5906001600160a01b031684836149e8565b60026045541415613c9c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610996565b6002604555613cb4604654600160a01b900460ff1690565b15613cf45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b613cff6113d6614235565b613d3c613d0a614235565b60036000613d16614235565b6001600160a01b03166001600160a01b03168152602001908152602001600020546142a6565b613d476114c5614235565b613d526113f7614235565b613d5a614235565b6001600160a01b03167f7c79e6e24ed041d1072d54523b53956f01b91b835f0490856370594d9d14470e60405160405180910390a26001604555565b613d9e614235565b6001600160a01b0316613db96000546001600160a01b031690565b6001600160a01b031614613e0f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b6001600160a01b038116613e8b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610996565b613e9481614a91565b50565b613ec26040518060800160405280606081526020016000815260200160008152602001600081525090565b816001600160a01b0381163b613f255760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b82613f2f81612b60565b613fa15760405162461bcd60e51b815260206004820152602e60248201527f526571756972656d656e747352756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610996565b6001600160a01b0384166000908152604260209081526040918290208251815460a09381028201840190945260808101848152909391928492849184018282801561400b57602002820191906000526020600020905b815481526020019060010190808311613ff7575b50505050508152602001600182015481526020016002820154815260200160038201548152505092505050919050565b3b151590565b6046546000906001600160a01b03163314156140fb5760183610156140ce5760405162461bcd60e51b815260206004820152602260248201527f4552433237373148616e646c657256323a20496e76616c6964206d73672e646160448201527f74610000000000000000000000000000000000000000000000000000000000006064820152608401610996565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610f40565b5033610f40565b604a546000906001600160a01b0316158061411d5750604d54155b1561412a57506000610f40565b604d54604a60009054906101000a90046001600160a01b03166001600160a01b0316630572b0cc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561417b57600080fd5b505afa15801561418f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b39190615214565b6141c79069d3c21bcecceda1000000615413565b611ba191906153ff565b6001600160a01b0382166000908152604e6020908152604080832054604b90925282205460475469d3c21bcecceda100000092919061421090866153e7565b61421a9190615432565b6142249190615413565b61422e91906153ff565b9392505050565b6000611ba1614041565b6040546000908161425084866153e7565b111561428a5760405415614278576142718161426c85876153e7565b614ae1565b9050614285565b61428283856153e7565b90505b61422e565b506040549392505050565b61429d6148f0565b613e948161498c565b6142ae614235565b603a541561432a57603a546001600160a01b0382166000908152603b60205260409020546142dc91906153e7565b421161432a5760405162461bcd60e51b815260206004820152601d60248201527f4c6f636b52756c65733a205769746864726177206d75737420776169740000006044820152606401610996565b6001600160a01b0381166000908152603b60205260409020429055816143b85760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a2043616e6e6f7420776974686472617760448201527f20300000000000000000000000000000000000000000000000000000000000006064820152608401610996565b42603b60006143c5614235565b6001600160a01b031681526020810191909152604001600020556143e882614af7565b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161442391815260200190565b60405180910390a2505050565b6001600160a01b0381166000908152604e6020526040902054604d54614457908290615432565b604d55600061446583614bd4565b905080604d5461447591906153e7565b604d556001600160a01b0383166000818152604e602090815260409182902084905581518481529081018590527f36c7c98dfe7e045d8de3e3a8ef7280d623eeb82e7ac5f92d4854297dd07813059101614423565b603654819015614548576036546001600160a01b0382166000908152603760205260409020546144fa91906153e7565b42116145485760405162461bcd60e51b815260206004820152601a60248201527f4c6f636b52756c65733a20436c61696d206d75737420776169740000000000006044820152606401610996565b6001600160a01b0380821660009081526037602090815260408083204290559285168252604c9052908120549081156146955760395460ff161515600114156146265761459d670de0b6b3a764000083615490565b90506145a98183615432565b91508160386000015411156146265760405162461bcd60e51b815260206004820152603c60248201527f4552433230526577617264506f6f6c3a2043616e6e6f7420776974686472617760448201527f202d206c6f636b436c61696d2e616d6f756e74203c20726577617264000000006064820152608401610996565b6001600160a01b038085166000908152604c60205260409020829055604854614651911685846149e8565b836001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04868360405161468c91815260200190565b60405180910390a25b50505050565b6146ae604654600160a01b900460ff1690565b6146fa5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610996565b604680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61474b614235565b6040516001600160a01b03909116815260200160405180910390a1565b61477b604654600160a01b900460ff1690565b156147bb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b604680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861474b614235565b600081116148625760405162461bcd60e51b815260206004820152601d60248201527f5374616b65546f6b656e577261707065723a20616d6f756e74203e20300000006044820152606401610996565b8060025461487091906153e7565b6002558060036000614880614235565b6001600160a01b03166001600160a01b03168152602001908152602001600020546148ab91906153e7565b600360006148b7614235565b6001600160a01b03168152602081019190915260400160002055613e946148dc614235565b6001546001600160a01b0316903084614cbc565b604a546001600160a01b03161561155d57614909614102565b60475461491691906153e7565b604755604a54604080517fb016584000000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163b01658409160048082019260009290919082900301818387803b15801561497857600080fd5b505af1158015614695573d6000803e3d6000fd5b6149978160006141d1565b6001600160a01b0382166000908152604c60205260409020546149ba91906153e7565b6001600160a01b039091166000908152604c6020908152604080832093909355604754604b90915291902055565b6040516001600160a01b0383166024820152604481018290526136f59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614d0d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818310614af0578161422e565b5090919050565b60008111614b475760405162461bcd60e51b815260206004820152601d60248201527f5374616b65546f6b656e577261707065723a20616d6f756e74203e20300000006044820152606401610996565b80600254614b559190615432565b6002558060036000614b65614235565b6001600160a01b03166001600160a01b0316815260200190815260200160002054614b909190615432565b60036000614b9c614235565b6001600160a01b03168152602081019190915260400160002055613e94614bc1614235565b6001546001600160a01b031690836149e8565b6049546000906001600160a01b0316614c0657506001600160a01b038116600090815260036020526040902054610932565b6049546001600160a01b03838116600081815260036020526040908190205490517f3f6f66f500000000000000000000000000000000000000000000000000000000815260048101929092526024820152911690633f6f66f590604401602060405180830381600087803b158015614c7d57600080fd5b505af1158015614c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cb59190615214565b9050610932565b6040516001600160a01b03808516602483015283166044820152606481018290526146959085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401614a2d565b6000614d62826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614df29092919063ffffffff16565b8051909150156136f55780806020019051810190614d8091906151b3565b6136f55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610996565b6060610f68848460008585843b614e4b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610996565b600080866001600160a01b03168587604051614e67919061528a565b60006040518083038185875af1925050503d8060008114614ea4576040519150601f19603f3d011682016040523d82523d6000602084013e614ea9565b606091505b5091509150614eb9828286614ec4565b979650505050505050565b60608315614ed357508161422e565b825115614ee35782518084602001fd5b8160405162461bcd60e51b81526004016109969190615307565b828054828255906000526020600020908101928215614f38579160200282015b82811115614f38578251825591602001919060010190614f1d565b50610f3e9291505b80821115610f3e5760008155600101614f40565b600082601f830112614f64578081fd5b8135602067ffffffffffffffff80831115614f8157614f816154d0565b818302604051601f19603f83011681018181108482111715614fa557614fa56154d0565b60405284815283810192508684018288018501891015614fc3578687fd5b8692505b85831015614fe5578035845292840192600192909201918401614fc7565b50979650505050505050565b600060208284031215615002578081fd5b813561422e816154e6565b60006020828403121561501e578081fd5b815161422e816154e6565b600080600080600080600060e0888a031215615043578283fd5b873561504e816154e6565b9650602088013567ffffffffffffffff811115615069578384fd5b6150758a828b01614f54565b9650506040880135615086816154fb565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b600080600080608085870312156150c3578384fd5b84356150ce816154e6565b9350602085013567ffffffffffffffff8111156150e9578384fd5b6150f587828801614f54565b949794965050505060408301359260600135919050565b6000806040838503121561511e578182fd5b8235615129816154e6565b91506020830135615139816154fb565b809150509250929050565b60008060208385031215615156578182fd5b823567ffffffffffffffff8082111561516d578384fd5b818501915085601f830112615180578384fd5b81358181111561518e578485fd5b86602080830285010111156151a1578485fd5b60209290920196919550909350505050565b6000602082840312156151c4578081fd5b815161422e816154fb565b600080604083850312156151e1578182fd5b82356151ec816154e6565b91506020830135615139816154e6565b60006020828403121561520d578081fd5b5035919050565b600060208284031215615225578081fd5b5051919050565b6000806040838503121561523e578182fd5b823591506020830135615139816154fb565b6000815180845260208085019450808401835b8381101561527f57815187529582019590820190600101615263565b509495945050505050565b6000825161529c818460208701615449565b9190910192915050565b600060c082526152b960c0830189615250565b96151560208301525060408101949094526060840192909252608083015260a090910152919050565b6000606082526152f56060830186615250565b60208301949094525060400152919050565b6000602082528251806020840152615326816040850160208701615449565b601f01601f19169190910160400192915050565b60006020825282516080602084015261535660a0840182615250565b90506020840151604084015260408401516060840152606084015160808401528091505092915050565b600060208252825160e0602084015261539d610100840182615250565b90506020840151151560408401526040840151606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b600082198211156153fa576153fa6154a4565b500190565b60008261540e5761540e6154ba565b500490565b600081600019048311821515161561542d5761542d6154a4565b500290565b600082821015615444576154446154a4565b500390565b60005b8381101561546457818101518382015260200161544c565b838111156146955750506000910152565b6000600019821415615489576154896154a4565b5060010190565b60008261549f5761549f6154ba565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613e9457600080fd5b8015158114613e9457600080fdfea2646970667358221220784cd0584701d2759d05fca41edaf55fbeec458498a978dae495ce7dba2e3dd764736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104205760003560e01c80638456cb5911610235578063cd3daf9d11610135578063df136d65116100c8578063e9fad8ee11610097578063f2fde38b1161007c578063f2fde38b146108b3578063f7c618c1146108c6578063fc17e07b146108d957610420565b8063e9fad8ee146108a2578063f0f49856146108aa57610420565b8063df136d651461086a578063dfeb943914610873578063e255911214610886578063e72f6e301461088f57610420565b8063d64791f811610104578063d64791f814610808578063d7805ece1461081b578063da74222814610844578063db6beab71461085757610420565b8063cd3daf9d146107d2578063ce1b815f146107da578063d1b844e6146107eb578063d2fe29d3146107f557610420565b8063a3c5b4d6116101c8578063a8863bb111610197578063b01658401161017c578063b0165840146107a4578063bd8e10f4146107ac578063bfcd5953146107bf57610420565b8063a8863bb11461077e578063accb04bd1461079157610420565b8063a3c5b4d61461073b578063a425632f1461074e578063a5cac0a114610758578063a694fc3a1461076b57610420565b80638da5cb5b116102045780638da5cb5b146106fa57806396769e891461070b5780639c48f2901461071e578063a0ed0d8e1461072857610420565b80638456cb59146106b757806387f260ce146106bf5780638aee8127146106c75780638b876347146106da57610420565b80633f4ba83a116103405780635c9415d3116102d35780636e15349b116102a257806370a082311161028757806370a0823114610666578063715018a61461068f5780637f7bc9061461069757610420565b80636e15349b1461064b5780636e6982af1461065e57610420565b80635c9415d3146106095780635c975abb1461061c578063618891101461062f57806369354e5c1461064257610420565b80634d49d3991161030f5780634d49d399146105c457806351ed6a30146105ce578063572b6c05146105df5780635ae64bd81461060157610420565b80633f4ba83a14610583578063431e48af1461058b578063446ed03d1461059e578063495bb729146105b157610420565b8063216213d5116103b85780632e0cefd7116103875780632e0cefd71461053d5780632e1a7d4d1461056057806337c08923146105735780633d18b9121461057b57610420565b8063216213d5146104c65780632b061ca2146104d95780632b7f01fc146104ff5780632c34a4591461052a57610420565b80630d59f435116103f45780630d59f435146104935780631657e4891461049b57806318160ddd146104ae5780631860f70d146104b657610420565b80628cc262146104255780630397d4581461044b5780630700037d146104605780630823a11614610480575b600080fd5b610438610433366004614ff1565b6108f9565b6040519081526020015b60405180910390f35b61045e610459366004614ff1565b610937565b005b61043861046e366004614ff1565b604c6020526000908152604090205481565b61043861048e366004614ff1565b610bfc565b610438610eda565b6104386104a9366004614ff1565b610f43565b600254610438565b610438683635c9adc5dea0000081565b61045e6104d4366004614ff1565b610f70565b6038546039546104ea919060ff1682565b60408051928352901515602083015201610442565b604954610512906001600160a01b031681565b6040516001600160a01b039091168152602001610442565b610438610538366004614ff1565b61120c565b61055061054b366004614ff1565b6112b6565b6040519015158152602001610442565b61045e61056e3660046151fc565b611320565b604d54610438565b61045e611404565b61045e6114dc565b61045e61059936600461522c565b61155f565b6104386105ac366004614ff1565b6116ac565b61045e6105bf366004614ff1565b6117e0565b61043862ed4e0081565b6001546001600160a01b0316610512565b6105506105ed366004614ff1565b6046546001600160a01b0390811691161490565b610438611a7c565b61045e6106173660046151fc565b611ba6565b610550604654600160a01b900460ff1690565b61045e61063d3660046151fc565b611cba565b61043860405481565b6104386106593660046151cf565b611dc7565b610438611ef8565b610438610674366004614ff1565b6001600160a01b031660009081526003602052604090205490565b61045e611f0b565b6106aa6106a5366004614ff1565b611ff2565b6040516104429190615380565b61045e6121d1565b610438612252565b61045e6106d5366004614ff1565b612265565b6104386106e8366004614ff1565b604b6020526000908152604090205481565b6000546001600160a01b0316610512565b604a54610512906001600160a01b031681565b6036546104389081565b61045e6107363660046150ae565b612525565b61045e610749366004615029565b612815565b603a546104389081565b610550610766366004614ff1565b612b60565b61045e6107793660046151fc565b612bae565b61043861078c3660046151cf565b6130b4565b61045e61079f36600461510c565b6131cf565b61045e613336565b61045e6107ba366004614ff1565b61333e565b61045e6107cd3660046151fc565b613495565b61043861354b565b6046546001600160a01b0316610512565b603c546104389081565b61045e6108033660046151fc565b613562565b61045e610816366004615144565b61366f565b610438610829366004614ff1565b6001600160a01b03166000908152604e602052604090205490565b61045e610852366004614ff1565b6136fa565b610438610865366004614ff1565b6137f9565b61043860475481565b61045e610881366004614ff1565b61396d565b610438603e5481565b61045e61089d366004614ff1565b6139da565b61045e613c49565b610438603f5481565b61045e6108c1366004614ff1565b613d96565b604854610512906001600160a01b031681565b6108ec6108e7366004614ff1565b613e97565b604051610442919061533a565b600061090c82610907614102565b6141d1565b6001600160a01b0383166000908152604c602052604090205461092f91906153e7565b90505b919050565b806001600160a01b0381163b61099f5760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b60648201526084015b60405180910390fd5b6109a7614235565b6001600160a01b03166109c26000546001600160a01b031690565b6001600160a01b031614610a185760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b816001600160a01b038116610a6f5760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b6040516370a0823160e01b815230600482015283906001600160a01b038216906370a082319060240160206040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190615214565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190615214565b1115610bd75760405162461bcd60e51b815260206004820152602560248201527f4552433230526577617264506f6f6c3a20696e73756666696369656e7420626160448201527f6c616e63650000000000000000000000000000000000000000000000000000006064820152608401610996565b600180546001600160a01b0319166001600160a01b0392909216919091179055505050565b600080805b604354811015610ed35760008060438381548110610c2f57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b03169150610c4f82886130b4565b6001600160a01b03831660009081526041602052604090205490915015610cdb576001600160a01b038216600090815260416020526040902060040154811015610cdb5760405162461bcd60e51b815260206004820152601c60248201527f526571756972656d656e747352756c65733a2062616c616e63654964000000006044820152606401610996565b6001600160a01b038216600090815260416020526040902060019081015460ff1615151415610e5b576001600160a01b03828116600081815260416020526040908190206002015490516370a0823160e01b8152928a166004840152916370a082319060240160206040518083038186803b158015610d5957600080fd5b505afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d919190615214565b1015610ddf5760405162461bcd60e51b815260206004820152601c60248201527f526571756972656d656e747352756c65733a2062616c616e63654f66000000006044820152606401610996565b6040516370a0823160e01b81526001600160a01b0388811660048301528316906370a082319060240160206040518083038186803b158015610e2057600080fd5b505afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190615214565b92505b6001600160a01b038216600090815260416020526040902060050154610e819082615413565b6001600160a01b038316600090815260416020526040902060030154610ea79085615413565b610eb191906153e7565b610ebb90866153e7565b94505050508080610ecb90615475565b915050610c01565b5092915050565b603c546000908190603d82610eed614235565b6001600160a01b03166001600160a01b0316815260200190815260200160002054610f1891906153e7565b905080421115610f3457610f2c8142615432565b915050610f40565b6000915050610f40565b505b90565b600080610f4f836137f9565b90506000610f5c8461120c565b9050610f68828261423f565b949350505050565b610f78614235565b6001600160a01b0316610f936000546001600160a01b031690565b6001600160a01b031614610fe95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b806001600160a01b0381163b61104c5760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b81611056816112b6565b6110c85760405162461bcd60e51b815260206004820152602e60248201527f526571756972656d656e747352756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610996565b6001600160a01b03831660009081526041602052604081206006015460438054869391906110f890600190615432565b8154811061111657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604380546001600160a01b03909216925082918490811061115357634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260419091526040902060060182905560438054806111ae57634e487b7160e01b600052603160045260246000fd5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038816917f47e3c945866c02102662275722b0b8ae9769ad96d6ddcc8a4c6d8d74ff16706291a2505050505050565b600080805b604454811015610ed3576000806044838154811061123f57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b0316915061125f8288611dc7565b905061126b81846153e7565b6001600160a01b0383166000908152604260205260409020600201549093506112949084615413565b61129e90866153e7565b945050505080806112ae90615475565b915050611211565b6043546000901580159061092f57506001600160a01b03821660008181526041602052604090206006015460438054909190811061130457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161492915050565b600260455414156113735760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610996565b600260455561138b604654600160a01b900460ff1690565b156113cb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b6113db6113d6614235565b614295565b6113ec6113e6614235565b826142a6565b6113fc6113f7614235565b614430565b506001604555565b600260455414156114575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610996565b600260455561146f604654600160a01b900460ff1690565b156114af5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b6114ba6113d6614235565b6114ca6114c5614235565b6144ca565b6114d56113f7614235565b6001604555565b6114e4614235565b6001600160a01b03166114ff6000546001600160a01b031690565b6001600160a01b0316146115555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b61155d61469b565b565b611567614235565b6001600160a01b03166115826000546001600160a01b031690565b6001600160a01b0316146115d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b683635c9adc5dea000008211156116575760405162461bcd60e51b815260206004820152602560248201527f4c6f636b52756c65733a20696e76616c6964206e6577416d6f756e744c6f636b60448201527f436c61696d0000000000000000000000000000000000000000000000000000006064820152608401610996565b60388290556039805460ff19168215159081179091556040805184815260208101929092527fae4d8a2a6d24c92b12bc1ad576eb89a6c352b143519ecbc978c0f5d75bb1d9c791015b60405180910390a15050565b600080805b604454811015610ed357600080604483815481106116df57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001600160a01b031691506116ff8288611dc7565b6001600160a01b0383166000908152604260205260409020549091501561178b576001600160a01b03821660009081526042602052604090206001015481101561178b5760405162461bcd60e51b815260206004820152601c60248201527f526571756972656d656e747352756c65733a2062616c616e63654964000000006044820152606401610996565b61179581846153e7565b6001600160a01b0383166000908152604260205260409020600201549093506117be9084615413565b6117c890866153e7565b945050505080806117d890615475565b9150506116b1565b6117e8614235565b6001600160a01b03166118036000546001600160a01b031690565b6001600160a01b0316146118595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b806001600160a01b0381163b6118bc5760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b816118c681612b60565b6119385760405162461bcd60e51b815260206004820152602e60248201527f526571756972656d656e747352756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610996565b6001600160a01b038316600090815260426020526040812060030154604480548693919061196890600190615432565b8154811061198657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604480546001600160a01b0390921692508291849081106119c357634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526042909152604090206003018290556044805480611a1e57634e487b7160e01b600052603160045260246000fd5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038816917f08617ff2b2e08e21be93ba4e04edc58f73671d33133725194bb67fddd33b1eb091a2505050505050565b6001546048546000916001600160a01b03918216911614611b19576048546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b129190615214565b9050610f40565b6002546001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611b5f57600080fd5b505afa158015611b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b979190615214565b611ba19190615432565b905090565b611bae614235565b6001600160a01b0316611bc96000546001600160a01b031690565b6001600160a01b031614611c1f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b62ed4e00811115611c7e5760405162461bcd60e51b815260206004820152602360248201527f4c6f636b52756c65733a20696e76616c6964206c6f636b506572696f64496e5360448201526265637360e81b6064820152608401610996565b603a8190556040518181527f0a34a7f0967a1c454102f82743b9dcf955188e0a030905740e2c8a5b39910660906020015b60405180910390a150565b611cc2614235565b6001600160a01b0316611cdd6000546001600160a01b031690565b6001600160a01b031614611d335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b62ed4e00811115611d925760405162461bcd60e51b815260206004820152602360248201527f4c6f636b52756c65733a20696e76616c6964206c6f636b506572696f64496e5360448201526265637360e81b6064820152608401610996565b60368190556040518181527f1bc5ec4d2816c06ea16ad9f0e99eb3c74517b041ed9d0a7103dd6f775cd66f7c90602001611caf565b600080805b6001600160a01b038516600090815260426020526040902054811015611ef0576001600160a01b0385166000818152604260205260408120805491929162fdd58e91889186908110611e2e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015611e9657600080fd5b505afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece9190615214565b9050611eda81846153e7565b9250508080611ee890615475565b915050611dcc565b509392505050565b6036546000908190603782610eed614235565b611f13614235565b6001600160a01b0316611f2e6000546001600160a01b031690565b6001600160a01b031614611f845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b60405162461bcd60e51b815260206004820152602860248201527f4552433230526577617264506f6f6c3a2063616e27742072656e6f756e63654f60448201527f776e6572736869700000000000000000000000000000000000000000000000006064820152608401610996565b6120346040518060e001604052806060815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b816001600160a01b0381163b6120975760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b826120a1816112b6565b6121135760405162461bcd60e51b815260206004820152602e60248201527f526571756972656d656e747352756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610996565b6001600160a01b038416600090815260416020908152604091829020825181546101009381028201840190945260e08101848152909391928492849184018282801561217e57602002820191906000526020600020905b81548152602001906001019080831161216a575b5050509183525050600182015460ff1615156020820152600282015460408201526003820154606082015260048201546080820152600582015460a082015260069091015460c090910152949350505050565b6121d9614235565b6001600160a01b03166121f46000546001600160a01b031690565b6001600160a01b03161461224a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b61155d614768565b603a546000908190603b82610eed614235565b806001600160a01b0381163b6122c85760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401610996565b6122d0614235565b6001600160a01b03166122eb6000546001600160a01b031690565b6001600160a01b0316146123415760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b816001600160a01b0381166123985760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b6040516370a0823160e01b815230600482015283906001600160a01b038216906370a082319060240160206040518083038186803b1580156123d957600080fd5b505afa1580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190615214565b6048546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561245457600080fd5b505afa158015612468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248c9190615214565b11156125005760405162461bcd60e51b815260206004820152602560248201527f4552433230526577617264506f6f6c3a20696e73756666696369656e7420626160448201527f6c616e63650000000000000000000000000000000000000000000000000000006064820152608401610996565b604880546001600160a01b0319166001600160a01b0392909216919091179055505050565b61252d614235565b6001600160a01b03166125486000546001600160a01b031690565b6001600160a01b03161461259e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b836001600160a01b0381163b6126015760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b600084511180156126125750600083115b801561261e5750600082115b801561262d5750603e54845111155b6126795760405162461bcd60e51b815260206004820152601e60248201527f526571756972656d656e7452756c65733a20696e76616c6964206c69737400006044820152606401610996565b6001600160a01b0385166000908152604260209081526040909120855187926126a6929190880190614efd565b506001600160a01b0381166000908152604260205260409020600181018590556002018390556126d581612b60565b6127c857604454603f54116127525760405162461bcd60e51b815260206004820152602a60248201527f526571756972656d656e747352756c65733a20636f6e7472616374734c696d6960448201527f74206578636565646564000000000000000000000000000000000000000000006064820152608401610996565b604480546001808201835560008390527f9b22d3d61959b4d3528b1d8ba932c96fbe302b36a1aad1d95cab54f9e0a135ea90910180546001600160a01b0319166001600160a01b03851617905590546127ab9190615432565b6001600160a01b0382166000908152604260205260409020600301555b856001600160a01b03167f586adb7578e979f45e368cc35f5a22d692757ded182824b2c42923c3600ecd69868686604051612805939291906152e2565b60405180910390a2505050505050565b61281d614235565b6001600160a01b03166128386000546001600160a01b031690565b6001600160a01b03161461288e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b866001600160a01b0381163b6128f15760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b60018615151480156129035750600085115b801561290f5750600084115b8061294b575085158015612924575060008751115b80156129305750600083115b801561293c5750600082115b801561294b5750603e54875111155b6129975760405162461bcd60e51b815260206004820152601e60248201527f526571756972656d656e7452756c65733a20696e76616c6964206c69737400006044820152606401610996565b86518890156129cb576001600160a01b038116600090815260416020908152604090912089516129c9928b0190614efd565b505b6001600160a01b038116600090815260416020526040902060028101879055600381018690556004810185905560058101849055600101805460ff1916881515179055612a17816112b6565b612b0a57604354603f5411612a945760405162461bcd60e51b815260206004820152602a60248201527f526571756972656d656e747352756c65733a20636f6e7472616374734c696d6960448201527f74206578636565646564000000000000000000000000000000000000000000006064820152608401610996565b604380546001808201835560008390527f9690ad99d6ce244efa8a0f6c2d04036d3b33a9474db32a71b71135c69510279390910180546001600160a01b0319166001600160a01b0385161790559054612aed9190615432565b6001600160a01b0382166000908152604160205260409020600601555b886001600160a01b03167fe41df969317a5283b930ab971b419d925fc5c58516b283b7bee55e29af3734fb898989898989604051612b4d969594939291906152a6565b60405180910390a2505050505050505050565b6044546000901580159061092f57506001600160a01b03821660008181526042602052604090206003015460448054909190811061130457634e487b7160e01b600052603260045260246000fd5b60026045541415612c015760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610996565b6002604555612c19604654600160a01b900460ff1690565b15612c595760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b612c61614235565b603c5415612cdd57603c546001600160a01b0382166000908152603d6020526040902054612c8f91906153e7565b4211612cdd5760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b52756c65733a204465706f736974206d7573742077616974000000006044820152606401610996565b6001600160a01b0381166000908152603d60205260409020429055612d00614235565b8260036000612d0d614235565b6001600160a01b03166001600160a01b03168152602001908152602001600020546000612d3984610bfc565b90506000612d46856116ac565b90506000612d54838361423f565b90508015612db55780612d6785876153e7565b1115612db55760405162461bcd60e51b815260206004820152601d60248201527f526571756972656d656e747352756c65733a206d6178416c6c6f7765640000006044820152606401610996565b60008811612e055760405162461bcd60e51b815260206004820152601f60248201527f4552433230526577617264506f6f6c3a2043616e6e6f74207374616b652030006044820152606401610996565b60376000612e11614235565b6001600160a01b03168152602081019190915260400160002054612e57574260376000612e3c614235565b6001600160a01b031681526020810191909152604001600020555b42603d6000612e64614235565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000604d546000148015612ea65750604a546001600160a01b031615155b15612f3457604a60009054906101000a90046001600160a01b03166001600160a01b0316630572b0cc6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ef957600080fd5b505afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f319190615214565b90505b612f3f6113d6614235565b612f4889614812565b612f536113f7614235565b6000604e6000612f61614235565b6001600160a01b03166001600160a01b031681526020019081526020016000205411612ff55760405162461bcd60e51b815260206004820152602960248201527f4552433230526577617264506f6f6c3a206e6f7420656e6f75676820636f6e7460448201527f7269627574696f6e7300000000000000000000000000000000000000000000006064820152608401610996565b801561305a5780604c6000613008614235565b6001600160a01b03166001600160a01b031681526020019081526020016000205461303391906153e7565b604c600061303f614235565b6001600160a01b031681526020810191909152604001600020555b613062614235565b6001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8a60405161309c91815260200190565b60405180910390a25050600160455550505050505050565b600080805b6001600160a01b038516600090815260416020526040902054811015611ef0576001600160a01b03851660008181526041602052604081208054919291636352211e91908590811061311b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b815260040161314491815260200190565b60206040518083038186803b15801561315c57600080fd5b505afa158015613170573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613194919061500d565b9050846001600160a01b0316816001600160a01b031614156131bc576131b983615475565b92505b50806131c781615475565b9150506130b9565b816001600160a01b0381163b6132325760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401610996565b61323a614235565b6001600160a01b03166132556000546001600160a01b031690565b6001600160a01b0316146132ab5760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b826001600160a01b0381166133025760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b8215613310576133106148f0565b5050604a80546001600160a01b0319166001600160a01b03939093169290921790915550565b61155d6148f0565b806001600160a01b0381163b6133a15760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401610996565b6133a9614235565b6001600160a01b03166133c46000546001600160a01b031690565b6001600160a01b03161461341a5760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b816001600160a01b0381166134715760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b5050604980546001600160a01b0319166001600160a01b0392909216919091179055565b61349d614235565b6001600160a01b03166134b86000546001600160a01b031690565b6001600160a01b03161461350e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b6040805482825581518381526020810182905290917fe71352959b0ea69ae334d4403e7b41245e1f9e6270d8664f4d2ae2477447785891016116a0565b6000613555614102565b604754611ba191906153e7565b61356a614235565b6001600160a01b03166135856000546001600160a01b031690565b6001600160a01b0316146135db5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b62ed4e0081111561363a5760405162461bcd60e51b815260206004820152602360248201527f4c6f636b52756c65733a20696e76616c6964206c6f636b506572696f64496e5360448201526265637360e81b6064820152608401610996565b603c8190556040518181527fd5a5a9291a89dfff7924900a31224aa9b6afed79f5124add369f4a807f40f59790602001611caf565b6136776148f0565b60005b818110156136f55760008383838181106136a457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906136b99190614ff1565b90506001600160a01b0381166136cf57506136e3565b6136d88161498c565b6136e181614430565b505b806136ed81615475565b91505061367a565b505050565b806001600160a01b0381163b61375d5760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a206973206e6f74206120636f6e74726160448201526118dd60f21b6064820152608401610996565b613765614235565b6001600160a01b03166137806000546001600160a01b031690565b6001600160a01b0316146137d65760405162461bcd60e51b815260206004820152601a60248201527f4552433230526577617264506f6f6c3a206e6f742061646d696e0000000000006044820152606401610996565b50604680546001600160a01b0319166001600160a01b0392909216919091179055565b600080805b604354811015610ed35760008060006043848154811061382e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083526041909152604090912060019081015491925060ff909116151514156138e8576040516370a0823160e01b81526001600160a01b0388811660048301528216906370a082319060240160206040518083038186803b1580156138a957600080fd5b505afa1580156138bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e19190615214565b92506138f5565b6138f281886130b4565b91505b6001600160a01b03811660009081526041602052604090206005015461391b9083615413565b6001600160a01b0382166000908152604160205260409020600301546139419085615413565b61394b91906153e7565b61395590866153e7565b9450505050808061396590615475565b9150506137fe565b806001600160a01b0381166139c45760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b6139cd82614295565b6139d682614430565b5050565b6139e2614235565b6001600160a01b03166139fd6000546001600160a01b031690565b6001600160a01b031614613a535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b613a66604654600160a01b900460ff1690565b613ab25760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610996565b806001600160a01b038116613b095760405162461bcd60e51b815260206004820152601d60248201527f4552433230526577617264506f6f6c3a207a65726f20616464726573730000006044820152606401610996565b6001546048546000916001600160a01b0391821691161415613bb4576002546048546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613b6b57600080fd5b505afa158015613b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba39190615214565b613bad9190615432565b9050613c32565b6048546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613bf757600080fd5b505afa158015613c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2f9190615214565b90505b6048546136f5906001600160a01b031684836149e8565b60026045541415613c9c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610996565b6002604555613cb4604654600160a01b900460ff1690565b15613cf45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b613cff6113d6614235565b613d3c613d0a614235565b60036000613d16614235565b6001600160a01b03166001600160a01b03168152602001908152602001600020546142a6565b613d476114c5614235565b613d526113f7614235565b613d5a614235565b6001600160a01b03167f7c79e6e24ed041d1072d54523b53956f01b91b835f0490856370594d9d14470e60405160405180910390a26001604555565b613d9e614235565b6001600160a01b0316613db96000546001600160a01b031690565b6001600160a01b031614613e0f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610996565b6001600160a01b038116613e8b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610996565b613e9481614a91565b50565b613ec26040518060800160405280606081526020016000815260200160008152602001600081525090565b816001600160a01b0381163b613f255760405162461bcd60e51b815260206004820152602260248201527f526571756972656d656e747352756c65733a206973206e6f7420636f6e74726160448201526118dd60f21b6064820152608401610996565b82613f2f81612b60565b613fa15760405162461bcd60e51b815260206004820152602e60248201527f526571756972656d656e747352756c65733a20636f6e7472616374206973206e60448201527f6f7420696e20746865206c6973740000000000000000000000000000000000006064820152608401610996565b6001600160a01b0384166000908152604260209081526040918290208251815460a09381028201840190945260808101848152909391928492849184018282801561400b57602002820191906000526020600020905b815481526020019060010190808311613ff7575b50505050508152602001600182015481526020016002820154815260200160038201548152505092505050919050565b3b151590565b6046546000906001600160a01b03163314156140fb5760183610156140ce5760405162461bcd60e51b815260206004820152602260248201527f4552433237373148616e646c657256323a20496e76616c6964206d73672e646160448201527f74610000000000000000000000000000000000000000000000000000000000006064820152608401610996565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610f40565b5033610f40565b604a546000906001600160a01b0316158061411d5750604d54155b1561412a57506000610f40565b604d54604a60009054906101000a90046001600160a01b03166001600160a01b0316630572b0cc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561417b57600080fd5b505afa15801561418f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b39190615214565b6141c79069d3c21bcecceda1000000615413565b611ba191906153ff565b6001600160a01b0382166000908152604e6020908152604080832054604b90925282205460475469d3c21bcecceda100000092919061421090866153e7565b61421a9190615432565b6142249190615413565b61422e91906153ff565b9392505050565b6000611ba1614041565b6040546000908161425084866153e7565b111561428a5760405415614278576142718161426c85876153e7565b614ae1565b9050614285565b61428283856153e7565b90505b61422e565b506040549392505050565b61429d6148f0565b613e948161498c565b6142ae614235565b603a541561432a57603a546001600160a01b0382166000908152603b60205260409020546142dc91906153e7565b421161432a5760405162461bcd60e51b815260206004820152601d60248201527f4c6f636b52756c65733a205769746864726177206d75737420776169740000006044820152606401610996565b6001600160a01b0381166000908152603b60205260409020429055816143b85760405162461bcd60e51b815260206004820152602260248201527f4552433230526577617264506f6f6c3a2043616e6e6f7420776974686472617760448201527f20300000000000000000000000000000000000000000000000000000000000006064820152608401610996565b42603b60006143c5614235565b6001600160a01b031681526020810191909152604001600020556143e882614af7565b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161442391815260200190565b60405180910390a2505050565b6001600160a01b0381166000908152604e6020526040902054604d54614457908290615432565b604d55600061446583614bd4565b905080604d5461447591906153e7565b604d556001600160a01b0383166000818152604e602090815260409182902084905581518481529081018590527f36c7c98dfe7e045d8de3e3a8ef7280d623eeb82e7ac5f92d4854297dd07813059101614423565b603654819015614548576036546001600160a01b0382166000908152603760205260409020546144fa91906153e7565b42116145485760405162461bcd60e51b815260206004820152601a60248201527f4c6f636b52756c65733a20436c61696d206d75737420776169740000000000006044820152606401610996565b6001600160a01b0380821660009081526037602090815260408083204290559285168252604c9052908120549081156146955760395460ff161515600114156146265761459d670de0b6b3a764000083615490565b90506145a98183615432565b91508160386000015411156146265760405162461bcd60e51b815260206004820152603c60248201527f4552433230526577617264506f6f6c3a2043616e6e6f7420776974686472617760448201527f202d206c6f636b436c61696d2e616d6f756e74203c20726577617264000000006064820152608401610996565b6001600160a01b038085166000908152604c60205260409020829055604854614651911685846149e8565b836001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04868360405161468c91815260200190565b60405180910390a25b50505050565b6146ae604654600160a01b900460ff1690565b6146fa5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610996565b604680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61474b614235565b6040516001600160a01b03909116815260200160405180910390a1565b61477b604654600160a01b900460ff1690565b156147bb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610996565b604680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861474b614235565b600081116148625760405162461bcd60e51b815260206004820152601d60248201527f5374616b65546f6b656e577261707065723a20616d6f756e74203e20300000006044820152606401610996565b8060025461487091906153e7565b6002558060036000614880614235565b6001600160a01b03166001600160a01b03168152602001908152602001600020546148ab91906153e7565b600360006148b7614235565b6001600160a01b03168152602081019190915260400160002055613e946148dc614235565b6001546001600160a01b0316903084614cbc565b604a546001600160a01b03161561155d57614909614102565b60475461491691906153e7565b604755604a54604080517fb016584000000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163b01658409160048082019260009290919082900301818387803b15801561497857600080fd5b505af1158015614695573d6000803e3d6000fd5b6149978160006141d1565b6001600160a01b0382166000908152604c60205260409020546149ba91906153e7565b6001600160a01b039091166000908152604c6020908152604080832093909355604754604b90915291902055565b6040516001600160a01b0383166024820152604481018290526136f59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614d0d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818310614af0578161422e565b5090919050565b60008111614b475760405162461bcd60e51b815260206004820152601d60248201527f5374616b65546f6b656e577261707065723a20616d6f756e74203e20300000006044820152606401610996565b80600254614b559190615432565b6002558060036000614b65614235565b6001600160a01b03166001600160a01b0316815260200190815260200160002054614b909190615432565b60036000614b9c614235565b6001600160a01b03168152602081019190915260400160002055613e94614bc1614235565b6001546001600160a01b031690836149e8565b6049546000906001600160a01b0316614c0657506001600160a01b038116600090815260036020526040902054610932565b6049546001600160a01b03838116600081815260036020526040908190205490517f3f6f66f500000000000000000000000000000000000000000000000000000000815260048101929092526024820152911690633f6f66f590604401602060405180830381600087803b158015614c7d57600080fd5b505af1158015614c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cb59190615214565b9050610932565b6040516001600160a01b03808516602483015283166044820152606481018290526146959085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401614a2d565b6000614d62826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614df29092919063ffffffff16565b8051909150156136f55780806020019051810190614d8091906151b3565b6136f55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610996565b6060610f68848460008585843b614e4b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610996565b600080866001600160a01b03168587604051614e67919061528a565b60006040518083038185875af1925050503d8060008114614ea4576040519150601f19603f3d011682016040523d82523d6000602084013e614ea9565b606091505b5091509150614eb9828286614ec4565b979650505050505050565b60608315614ed357508161422e565b825115614ee35782518084602001fd5b8160405162461bcd60e51b81526004016109969190615307565b828054828255906000526020600020908101928215614f38579160200282015b82811115614f38578251825591602001919060010190614f1d565b50610f3e9291505b80821115610f3e5760008155600101614f40565b600082601f830112614f64578081fd5b8135602067ffffffffffffffff80831115614f8157614f816154d0565b818302604051601f19603f83011681018181108482111715614fa557614fa56154d0565b60405284815283810192508684018288018501891015614fc3578687fd5b8692505b85831015614fe5578035845292840192600192909201918401614fc7565b50979650505050505050565b600060208284031215615002578081fd5b813561422e816154e6565b60006020828403121561501e578081fd5b815161422e816154e6565b600080600080600080600060e0888a031215615043578283fd5b873561504e816154e6565b9650602088013567ffffffffffffffff811115615069578384fd5b6150758a828b01614f54565b9650506040880135615086816154fb565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b600080600080608085870312156150c3578384fd5b84356150ce816154e6565b9350602085013567ffffffffffffffff8111156150e9578384fd5b6150f587828801614f54565b949794965050505060408301359260600135919050565b6000806040838503121561511e578182fd5b8235615129816154e6565b91506020830135615139816154fb565b809150509250929050565b60008060208385031215615156578182fd5b823567ffffffffffffffff8082111561516d578384fd5b818501915085601f830112615180578384fd5b81358181111561518e578485fd5b86602080830285010111156151a1578485fd5b60209290920196919550909350505050565b6000602082840312156151c4578081fd5b815161422e816154fb565b600080604083850312156151e1578182fd5b82356151ec816154e6565b91506020830135615139816154e6565b60006020828403121561520d578081fd5b5035919050565b600060208284031215615225578081fd5b5051919050565b6000806040838503121561523e578182fd5b823591506020830135615139816154fb565b6000815180845260208085019450808401835b8381101561527f57815187529582019590820190600101615263565b509495945050505050565b6000825161529c818460208701615449565b9190910192915050565b600060c082526152b960c0830189615250565b96151560208301525060408101949094526060840192909252608083015260a090910152919050565b6000606082526152f56060830186615250565b60208301949094525060400152919050565b6000602082528251806020840152615326816040850160208701615449565b601f01601f19169190910160400192915050565b60006020825282516080602084015261535660a0840182615250565b90506020840151604084015260408401516060840152606084015160808401528091505092915050565b600060208252825160e0602084015261539d610100840182615250565b90506020840151151560408401526040840151606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b600082198211156153fa576153fa6154a4565b500190565b60008261540e5761540e6154ba565b500490565b600081600019048311821515161561542d5761542d6154a4565b500290565b600082821015615444576154446154a4565b500390565b60005b8381101561546457818101518382015260200161544c565b838111156146955750506000910152565b6000600019821415615489576154896154a4565b5060010190565b60008261549f5761549f6154ba565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613e9457600080fd5b8015158114613e9457600080fdfea2646970667358221220784cd0584701d2759d05fca41edaf55fbeec458498a978dae495ce7dba2e3dd764736f6c63430008020033",
  "devdoc": {
    "details": "The contract has two plugins that affect the behaviour: contributionCalculator and rewardCalculatorcontributionCalculator instead of using the stake directly the result of computeContribution is usedthis way some users can get an extra share of the rewardsrewardCalculator is used to manage the rate at which the rewards are distributed.This way we can build different types of pools by mixing in the plugins we want with this contract.default behaviour (address(0)) for contributionCalculator is to use the stacked amount as contribution.default behaviour (address(0)) for rewardCalculator is that no rewards are given",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "account": "the address of the account"
        },
        "returns": {
          "_0": "balance of staked tokens"
        }
      },
      "computeContribution(address)": {
        "details": "if the user change his holdings (or any other parameter that affect the contribution calculation),he can the reward distribution to his favor. This function must be called by an external agent ASAP toupdate the contribution for the user. We understand the risk but the rewards are distributed slowly sothe user cannot affect the reward distribution heavily.",
        "params": {
          "account": "the address of the account"
        }
      },
      "computeContributionInBatch(address[])": {
        "details": "see: computeContribution",
        "params": {
          "accounts": "the addresses of the accounts to update"
        }
      },
      "contributionOf(address)": {
        "details": "this is the same than the balanceOf only if the contribution calculatoruses the staked amount as the contribution of the user which is the default behaviour",
        "params": {
          "account": "the address of the account"
        },
        "returns": {
          "_0": "contribution of the users"
        }
      },
      "earned(address)": {
        "params": {
          "account": "the address of the account"
        },
        "returns": {
          "_0": "the available earnings for the user"
        }
      },
      "getReward()": {
        "details": "the user can withdraw his stake independently from the rewards"
      },
      "getRewardsAvailable()": {
        "details": "this function can be called by a reward calculator to throw if a campaign doesn't haveenough rewards to start",
        "returns": {
          "_0": "the total amount of deposited rewards"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverFunds(address)": {
        "details": "this function must be called in an emergency situation only.Calling it is risky specially when rewardToken == stakeToken",
        "params": {
          "receiver": "address of the beneficiary of the recovered funds"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "restartRewards()": {
        "details": "calling this function makes no difference. It is useful for testing and when the reward calculatoris changed."
      },
      "rewardPerToken()": {
        "details": "This value multiplied by the user contribution is the share of accumulated rewards for the user. Takinginto account the value of totalContributions.",
        "returns": {
          "_0": "the accumulated total rewards"
        }
      },
      "setRewardCalculator(address,bool)": {
        "params": {
          "contractAddress": "address of a plugin that calculates absolute rewards at any point in time",
          "restartRewards_": "if true the rewards from the previous calculator are accumulated before changing it"
        }
      },
      "setRewardToken(address)": {
        "params": {
          "contractAddress": "address token used to pay rewards"
        }
      },
      "setStakeToken(address)": {
        "params": {
          "contractAddress": "address token used to stake funds"
        }
      },
      "setTimelockClaim(uint256)": {
        "params": {
          "_lockPeriodInSecs": "amount of time the user must wait between reward withdrawal"
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "trustedForwarder": "address of the contract that is enabled to send meta-tx on behalf of the user"
        }
      },
      "stake(uint256)": {
        "details": "the user must approve in the stake token before calling this function",
        "params": {
          "amount": "the amount of tokens to stake"
        }
      },
      "stakeToken()": {
        "returns": {
          "_0": "address of the stake token contract"
        }
      },
      "totalContributions()": {
        "details": "this is the same than the totalSupply only if the contribution calculatoruses the staked amount as the contribution of the user which is the default behaviour",
        "returns": {
          "_0": "total contributions of the users"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "the total supply of staked tokens"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "the user can withdraw his stake independently from the rewards",
        "params": {
          "amount": "the amount of tokens to withdraw"
        }
      }
    },
    "title": "A pool that distributes rewards between users that stake any erc20 token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "return the balance of staked tokens for a user"
      },
      "computeContribution(address)": {
        "notice": "update the contribution for a user"
      },
      "computeContributionInBatch(address[])": {
        "notice": "update the contribution for a sef of users"
      },
      "contributionOf(address)": {
        "notice": "return the contribution of some user"
      },
      "earned(address)": {
        "notice": "available earnings for some user"
      },
      "exit()": {
        "notice": "withdraw the stake and the rewards from the contract"
      },
      "getReward()": {
        "notice": "withdraw the rewards from the contract"
      },
      "getRewardsAvailable()": {
        "notice": "return the amount of rewards deposited in the contract that can be distributed by different campaigns"
      },
      "recoverFunds(address)": {
        "notice": "the admin recover is able to recover reward funds"
      },
      "restartRewards()": {
        "notice": "accumulates the current rewards into rewardPerTokenStored and restart the reward calculator"
      },
      "rewardPerToken()": {
        "notice": "accumulated rewards taking into account the totalContribution (see: rewardPerTokenStored)"
      },
      "setContributionRules(address)": {
        "notice": "set contract that contains all the contribution rules"
      },
      "setRewardCalculator(address,bool)": {
        "notice": "set the reward calculator"
      },
      "setRewardToken(address)": {
        "notice": "set the reward token"
      },
      "setStakeToken(address)": {
        "notice": "set the stake token"
      },
      "setTimelockClaim(uint256)": {
        "notice": "set the _lockPeriodInSecs for the anti-compound buffer"
      },
      "setTrustedForwarder(address)": {
        "notice": "set the trusted forwarder"
      },
      "stake(uint256)": {
        "notice": "stake some amount into the contract"
      },
      "stakeToken()": {
        "notice": "return the address of the stake token contract"
      },
      "totalContributions()": {
        "notice": "return the sum of the values returned by the contribution calculator"
      },
      "totalSupply()": {
        "notice": "return the total supply of staked tokens"
      },
      "withdraw(uint256)": {
        "notice": "withdraw the stake from the contract"
      }
    },
    "notice": "The contributions are updated passively, an external call to computeContribution from a backend is needed.After initialization the reward calculator must be set by the admin.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31751,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_stakeToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)2550"
      },
      {
        "astId": 31753,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 31757,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31864,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 34025,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "timeLockClaim",
        "offset": 0,
        "slot": "54",
        "type": "t_struct(TimeLockClaim)33985_storage"
      },
      {
        "astId": 34028,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "amountLockClaim",
        "offset": 0,
        "slot": "56",
        "type": "t_struct(AmountLockClaim)33990_storage"
      },
      {
        "astId": 34031,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "lockWithdraw",
        "offset": 0,
        "slot": "58",
        "type": "t_struct(TimeLockWithdraw)33997_storage"
      },
      {
        "astId": 34034,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "lockDeposit",
        "offset": 0,
        "slot": "60",
        "type": "t_struct(TimeLockDeposit)34004_storage"
      },
      {
        "astId": 34366,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "idsLimit",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 34369,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "contractsLimit",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 34371,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "maxStakeOverall",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      },
      {
        "astId": 34403,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_listERC721",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_contract(IERC721)3782,t_struct(ERC721RequirementRule)34387_storage)"
      },
      {
        "astId": 34409,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_listERC1155",
        "offset": 0,
        "slot": "66",
        "type": "t_mapping(t_contract(IERC1155)1836,t_struct(ERC1155RequirementRule)34397_storage)"
      },
      {
        "astId": 34413,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_listERC721Index",
        "offset": 0,
        "slot": "67",
        "type": "t_array(t_contract(IERC721)3782)dyn_storage"
      },
      {
        "astId": 34417,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_listERC1155Index",
        "offset": 0,
        "slot": "68",
        "type": "t_array(t_contract(IERC1155)1836)dyn_storage"
      },
      {
        "astId": 589,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_status",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 25221,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "70",
        "type": "t_address"
      },
      {
        "astId": 504,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_paused",
        "offset": 20,
        "slot": "70",
        "type": "t_bool"
      },
      {
        "astId": 29648,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 29651,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "72",
        "type": "t_contract(IERC20)2550"
      },
      {
        "astId": 29654,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "contributionRules",
        "offset": 0,
        "slot": "73",
        "type": "t_contract(IContributionRules)32171"
      },
      {
        "astId": 29657,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "rewardCalculator",
        "offset": 0,
        "slot": "74",
        "type": "t_contract(IRewardCalculator)32185"
      },
      {
        "astId": 29661,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "75",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 29665,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "rewards",
        "offset": 0,
        "slot": "76",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 29667,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_totalContributions",
        "offset": 0,
        "slot": "77",
        "type": "t_uint256"
      },
      {
        "astId": 29671,
        "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
        "label": "_contributions",
        "offset": 0,
        "slot": "78",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC1155)1836)dyn_storage": {
        "base": "t_contract(IERC1155)1836",
        "encoding": "dynamic_array",
        "label": "contract IERC1155[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC721)3782)dyn_storage": {
        "base": "t_contract(IERC721)3782",
        "encoding": "dynamic_array",
        "label": "contract IERC721[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IContributionRules)32171": {
        "encoding": "inplace",
        "label": "contract IContributionRules",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155)1836": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2550": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)3782": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardCalculator)32185": {
        "encoding": "inplace",
        "label": "contract IRewardCalculator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC1155)1836,t_struct(ERC1155RequirementRule)34397_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC1155)1836",
        "label": "mapping(contract IERC1155 => struct RequirementsRules.ERC1155RequirementRule)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC1155RequirementRule)34397_storage"
      },
      "t_mapping(t_contract(IERC721)3782,t_struct(ERC721RequirementRule)34387_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC721)3782",
        "label": "mapping(contract IERC721 => struct RequirementsRules.ERC721RequirementRule)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC721RequirementRule)34387_storage"
      },
      "t_struct(AmountLockClaim)33990_storage": {
        "encoding": "inplace",
        "label": "struct LockRules.AmountLockClaim",
        "members": [
          {
            "astId": 33987,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 33989,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "claimLockEnabled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ERC1155RequirementRule)34397_storage": {
        "encoding": "inplace",
        "label": "struct RequirementsRules.ERC1155RequirementRule",
        "members": [
          {
            "astId": 34390,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "ids",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 34392,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "minAmountId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 34394,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "maxAmountId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 34396,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "index",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ERC721RequirementRule)34387_storage": {
        "encoding": "inplace",
        "label": "struct RequirementsRules.ERC721RequirementRule",
        "members": [
          {
            "astId": 34374,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "ids",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 34376,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "balanceOf",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 34378,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "minAmountBalanceOf",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 34380,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "maxAmountBalanceOf",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 34382,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "minAmountId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 34384,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "maxAmountId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 34386,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "index",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(TimeLockClaim)33985_storage": {
        "encoding": "inplace",
        "label": "struct LockRules.TimeLockClaim",
        "members": [
          {
            "astId": 33980,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "lockPeriodInSecs",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 33984,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "lastClaim",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TimeLockDeposit)34004_storage": {
        "encoding": "inplace",
        "label": "struct LockRules.TimeLockDeposit",
        "members": [
          {
            "astId": 33999,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "lockPeriodInSecs",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34003,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "lastDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TimeLockWithdraw)33997_storage": {
        "encoding": "inplace",
        "label": "struct LockRules.TimeLockWithdraw",
        "members": [
          {
            "astId": 33992,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "lockPeriodInSecs",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 33996,
            "contract": "src/solc_0.8/defi/ERC20RewardPool.sol:ERC20RewardPool",
            "label": "lastWithdraw",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}